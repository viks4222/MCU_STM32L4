
UART_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b48  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004cd0  08004cd0  00005cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d18  08004d18  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004d18  08004d18  00005d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d20  08004d20  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d20  08004d20  00005d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d24  08004d24  00005d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004d28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000014  08004d3c  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08004d3c  000063e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012566  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296c  00000000  00000000  000185aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001af18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abf  00000000  00000000  0001bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027947  00000000  00000000  0001c7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115c5  00000000  00000000  00044136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f660c  00000000  00000000  000556fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bd07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a28  00000000  00000000  0014bd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014f774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cb8 	.word	0x08004cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004cb8 	.word	0x08004cb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa46 	bl	800094c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f806 	bl	80004d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f89e 	bl	8000604 <MX_GPIO_Init>

  MX_USART2_UART_Init();
 80004c8:	f000 f866 	bl	8000598 <MX_USART2_UART_Init>

  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <main+0x14>

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b096      	sub	sp, #88	@ 0x58
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2244      	movs	r2, #68	@ 0x44
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f004 fbbe 	bl	8004c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004f6:	f001 ff19 	bl	800232c <HAL_PWREx_ControlVoltageScaling>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000500:	f000 f8dc 	bl	80006bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000504:	f001 fef4 	bl	80022f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000508:	4b22      	ldr	r3, [pc, #136]	@ (8000594 <SystemClock_Config+0xc4>)
 800050a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800050e:	4a21      	ldr	r2, [pc, #132]	@ (8000594 <SystemClock_Config+0xc4>)
 8000510:	f023 0318 	bic.w	r3, r3, #24
 8000514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000518:	231c      	movs	r3, #28
 800051a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800051c:	2301      	movs	r3, #1
 800051e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000520:	2301      	movs	r3, #1
 8000522:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000524:	2301      	movs	r3, #1
 8000526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800052c:	2360      	movs	r3, #96	@ 0x60
 800052e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	2302      	movs	r3, #2
 8000532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000534:	2301      	movs	r3, #1
 8000536:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000538:	2301      	movs	r3, #1
 800053a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800053c:	2314      	movs	r3, #20
 800053e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000540:	2307      	movs	r3, #7
 8000542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000544:	2302      	movs	r3, #2
 8000546:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000548:	2302      	movs	r3, #2
 800054a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4618      	mov	r0, r3
 8000552:	f001 ff41 	bl	80023d8 <HAL_RCC_OscConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800055c:	f000 f8ae 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	230f      	movs	r3, #15
 8000562:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000564:	2303      	movs	r3, #3
 8000566:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000568:	2380      	movs	r3, #128	@ 0x80
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	2101      	movs	r1, #1
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fb09 	bl	8002b90 <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000584:	f000 f89a 	bl	80006bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000588:	f003 f810 	bl	80035ac <HAL_RCCEx_EnableMSIPLLMode>
}
 800058c:	bf00      	nop
 800058e:	3758      	adds	r7, #88	@ 0x58
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 800059e:	4a18      	ldr	r2, [pc, #96]	@ (8000600 <MX_USART2_UART_Init+0x68>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005a2:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005da:	4808      	ldr	r0, [pc, #32]	@ (80005fc <MX_USART2_UART_Init+0x64>)
 80005dc:	f003 f9c8 	bl	8003970 <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005e6:	f000 f869 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= USART_CR1_RXNEIE | USART_CR1_TXEIE; // enable RX/TX interrupt
 80005ea:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <MX_USART2_UART_Init+0x68>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <MX_USART2_UART_Init+0x68>)
 80005f0:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80005f4:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000030 	.word	0x20000030
 8000600:	40004400 	.word	0x40004400

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b08d      	sub	sp, #52	@ 0x34
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061a:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a26      	ldr	r2, [pc, #152]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0310 	and.w	r3, r3, #16
 800062e:	61bb      	str	r3, [r7, #24]
 8000630:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a1a      	ldr	r2, [pc, #104]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_GPIO_Init+0xb4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

}
 80006aa:	bf00      	nop
 80006ac:	3734      	adds	r7, #52	@ 0x34
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <Error_Handler+0x8>

080006c8 <USART2_IRQHandler>:

/**
  * @brief  This function handles the UART 2 interrupt
  */
void USART2_IRQHandler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  // if receive buffer ready to read
  if( USART2->ISR & USART_ISR_RXNE )
 80006cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <USART2_IRQHandler+0x70>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d012      	beq.n	80006fe <USART2_IRQHandler+0x36>
  {
  // move byte from buffer to message
    if(Rx_count < MAX)
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <USART2_IRQHandler+0x74>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	d80e      	bhi.n	80006fe <USART2_IRQHandler+0x36>
    {
      receive[Rx_count] = USART2->RDR & 0x0FF; // reading RDR clears RXNE flag
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <USART2_IRQHandler+0x70>)
 80006e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80006e4:	b299      	uxth	r1, r3
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <USART2_IRQHandler+0x74>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	b2c9      	uxtb	r1, r1
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <USART2_IRQHandler+0x78>)
 80006f0:	5499      	strb	r1, [r3, r2]
	  Rx_count++;
 80006f2:	4b12      	ldr	r3, [pc, #72]	@ (800073c <USART2_IRQHandler+0x74>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <USART2_IRQHandler+0x74>)
 80006fc:	701a      	strb	r2, [r3, #0]
    }
  }
  // if byte ready to transfer
  if(USART2->ISR & USART_ISR_TC)
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <USART2_IRQHandler+0x70>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000706:	2b00      	cmp	r3, #0
 8000708:	d010      	beq.n	800072c <USART2_IRQHandler+0x64>
  {
    // send  byte to TDR
    if(Tx_count < MAX)
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <USART2_IRQHandler+0x7c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b05      	cmp	r3, #5
 8000710:	d80c      	bhi.n	800072c <USART2_IRQHandler+0x64>
    {
      USART2->TDR = transmit[Tx_count]; // write to TDR (clears TC bit)
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <USART2_IRQHandler+0x7c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <USART2_IRQHandler+0x80>)
 800071a:	5c9a      	ldrb	r2, [r3, r2]
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <USART2_IRQHandler+0x70>)
 800071e:	851a      	strh	r2, [r3, #40]	@ 0x28
      Tx_count++;
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <USART2_IRQHandler+0x7c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <USART2_IRQHandler+0x7c>)
 800072a:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40004400 	.word	0x40004400
 800073c:	200000b9 	.word	0x200000b9
 8000740:	200000b8 	.word	0x200000b8
 8000744:	200000ba 	.word	0x200000ba
 8000748:	20000000 	.word	0x20000000

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000756:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <HAL_MspInit+0x44>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6613      	str	r3, [r2, #96]	@ 0x60
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <HAL_MspInit+0x44>)
 8000760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076e:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_MspInit+0x44>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	6593      	str	r3, [r2, #88]	@ 0x58
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x44>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0ac      	sub	sp, #176	@ 0xb0
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2288      	movs	r2, #136	@ 0x88
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fa53 	bl	8004c60 <memset>
  if(huart->Instance==USART2)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a25      	ldr	r2, [pc, #148]	@ (8000854 <HAL_UART_MspInit+0xc0>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d142      	bne.n	800084a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fc01 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007dc:	f7ff ff6e 	bl	80006bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <HAL_UART_MspInit+0xc4>)
 80007e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e4:	4a1c      	ldr	r2, [pc, #112]	@ (8000858 <HAL_UART_MspInit+0xc4>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <HAL_UART_MspInit+0xc4>)
 80007ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <HAL_UART_MspInit+0xc4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <HAL_UART_MspInit+0xc4>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <HAL_UART_MspInit+0xc4>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000808:	f003 0308 	and.w	r3, r3, #8
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000810:	2360      	movs	r3, #96	@ 0x60
 8000812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081c:	2301      	movs	r3, #1
 800081e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000828:	2307      	movs	r3, #7
 800082a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000832:	4619      	mov	r1, r3
 8000834:	4809      	ldr	r0, [pc, #36]	@ (800085c <HAL_UART_MspInit+0xc8>)
 8000836:	f000 fa17 	bl	8000c68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2026      	movs	r0, #38	@ 0x26
 8000840:	f000 f9db 	bl	8000bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000844:	2026      	movs	r0, #38	@ 0x26
 8000846:	f000 f9f4 	bl	8000c32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800084a:	bf00      	nop
 800084c:	37b0      	adds	r7, #176	@ 0xb0
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40004400 	.word	0x40004400
 8000858:	40021000 	.word	0x40021000
 800085c:	48000c00 	.word	0x48000c00

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <MemManage_Handler+0x4>

08000878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <UsageFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b6:	f000 f8a5 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80008c4:	4802      	ldr	r0, [pc, #8]	@ (80008d0 <OTG_FS_IRQHandler+0x10>)
 80008c6:	f000 fb79 	bl	8000fbc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000c0 	.word	0x200000c0

080008d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000930 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff ffea 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	@ (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	@ (800093c <LoopForever+0xe>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	@ (8000944 <LoopForever+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f004 f9a3 	bl	8004c70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092a:	f7ff fdc5 	bl	80004b8 <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000930:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800093c:	08004d28 	.word	0x08004d28
  ldr r2, =_sbss
 8000940:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000944:	200003e0 	.word	0x200003e0

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <HAL_Init+0x3c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <HAL_Init+0x3c>)
 800095c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000960:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000962:	2003      	movs	r0, #3
 8000964:	f000 f93e 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000968:	2000      	movs	r0, #0
 800096a:	f000 f80f 	bl	800098c <HAL_InitTick>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	e001      	b.n	800097e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097a:	f7ff fee7 	bl	800074c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800097e:	79fb      	ldrb	r3, [r7, #7]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_InitTick+0x6c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d023      	beq.n	80009e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_InitTick+0x70>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f949 	bl	8000c4e <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10f      	bne.n	80009e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d809      	bhi.n	80009dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f913 	bl	8000bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <HAL_InitTick+0x74>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e007      	b.n	80009ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e004      	b.n	80009ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e001      	b.n	80009ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000010 	.word	0x20000010
 80009fc:	20000008 	.word	0x20000008
 8000a00:	2000000c 	.word	0x2000000c

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000010 	.word	0x20000010
 8000a28:	200000bc 	.word	0x200000bc

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200000bc 	.word	0x200000bc

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4907      	ldr	r1, [pc, #28]	@ (8000ae0 <__NVIC_EnableIRQ+0x38>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	@ 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff29 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff3e 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff31 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c76:	e17f      	b.n	8000f78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8171 	beq.w	8000f72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d005      	beq.n	8000ca8 <HAL_GPIO_Init+0x40>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d130      	bne.n	8000d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	f003 0201 	and.w	r2, r3, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d118      	bne.n	8000d48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	f003 0201 	and.w	r2, r3, #1
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d017      	beq.n	8000d84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	6939      	ldr	r1, [r7, #16]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80ac 	beq.w	8000f72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f98 <HAL_GPIO_Init+0x330>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8000f98 <HAL_GPIO_Init+0x330>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e26:	4b5c      	ldr	r3, [pc, #368]	@ (8000f98 <HAL_GPIO_Init+0x330>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e32:	4a5a      	ldr	r2, [pc, #360]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e5c:	d025      	beq.n	8000eaa <HAL_GPIO_Init+0x242>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa0 <HAL_GPIO_Init+0x338>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d01f      	beq.n	8000ea6 <HAL_GPIO_Init+0x23e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa4 <HAL_GPIO_Init+0x33c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d019      	beq.n	8000ea2 <HAL_GPIO_Init+0x23a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa8 <HAL_GPIO_Init+0x340>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x236>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4c      	ldr	r2, [pc, #304]	@ (8000fac <HAL_GPIO_Init+0x344>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x232>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4b      	ldr	r2, [pc, #300]	@ (8000fb0 <HAL_GPIO_Init+0x348>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x22e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4a      	ldr	r2, [pc, #296]	@ (8000fb4 <HAL_GPIO_Init+0x34c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x22a>
 8000e8e:	2306      	movs	r3, #6
 8000e90:	e00c      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e92:	2307      	movs	r3, #7
 8000e94:	e00a      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ebc:	4937      	ldr	r1, [pc, #220]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eca:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eee:	4a32      	ldr	r2, [pc, #200]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f18:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f42:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f6c:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f47f ae78 	bne.w	8000c78 <HAL_GPIO_Init+0x10>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	48000c00 	.word	0x48000c00
 8000fac:	48001000 	.word	0x48001000
 8000fb0:	48001400 	.word	0x48001400
 8000fb4:	48001800 	.word	0x48001800
 8000fb8:	40010400 	.word	0x40010400

08000fbc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fafb 	bl	80045ce <USB_GetMode>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	f040 80fb 	bne.w	80011d6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f003 fabe 	bl	8004566 <USB_ReadInterrupts>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80f1 	beq.w	80011d4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fab5 	bl	8004566 <USB_ReadInterrupts>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001002:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001006:	d104      	bne.n	8001012 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001010:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f003 faa5 	bl	8004566 <USB_ReadInterrupts>
 800101c:	4603      	mov	r3, r0
 800101e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001026:	d104      	bne.n	8001032 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001030:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fa95 	bl	8004566 <USB_ReadInterrupts>
 800103c:	4603      	mov	r3, r0
 800103e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001042:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001046:	d104      	bne.n	8001052 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001050:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fa85 	bl	8004566 <USB_ReadInterrupts>
 800105c:	4603      	mov	r3, r0
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b02      	cmp	r3, #2
 8001064:	d103      	bne.n	800106e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2202      	movs	r2, #2
 800106c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fa77 	bl	8004566 <USB_ReadInterrupts>
 8001078:	4603      	mov	r3, r0
 800107a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800107e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001082:	d120      	bne.n	80010c6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800108c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d113      	bne.n	80010c6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800109e:	2110      	movs	r1, #16
 80010a0:	6938      	ldr	r0, [r7, #16]
 80010a2:	f003 f9a8 	bl	80043f6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80010a6:	6938      	ldr	r0, [r7, #16]
 80010a8:	f003 f9d7 	bl	800445a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7a5b      	ldrb	r3, [r3, #9]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d105      	bne.n	80010c0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fa95 	bl	80045ea <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f003 fd4d 	bl	8004b60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 fa4b 	bl	8004566 <USB_ReadInterrupts>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010da:	d102      	bne.n	80010e2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f001 f894 	bl	800220a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fa3d 	bl	8004566 <USB_ReadInterrupts>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d106      	bne.n	8001104 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f003 fd16 	bl	8004b28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2208      	movs	r2, #8
 8001102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fa2c 	bl	8004566 <USB_ReadInterrupts>
 800110e:	4603      	mov	r3, r0
 8001110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001114:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001118:	d139      	bne.n	800118e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f003 faa0 	bl	8004664 <USB_HC_ReadInterrupt>
 8001124:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e025      	b.n	8001178 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	fa22 f303 	lsr.w	r3, r2, r3
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d018      	beq.n	8001172 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	015a      	lsls	r2, r3, #5
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001156:	d106      	bne.n	8001166 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f859 	bl	8001216 <HCD_HC_IN_IRQHandler>
 8001164:	e005      	b.n	8001172 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fc91 	bl	8001a94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	795b      	ldrb	r3, [r3, #5]
 800117c:	461a      	mov	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	4293      	cmp	r3, r2
 8001182:	d3d3      	bcc.n	800112c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800118c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f003 f9e7 	bl	8004566 <USB_ReadInterrupts>
 8001198:	4603      	mov	r3, r0
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d101      	bne.n	80011a6 <HAL_HCD_IRQHandler+0x1ea>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_HCD_IRQHandler+0x1ec>
 80011a6:	2300      	movs	r3, #0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d014      	beq.n	80011d6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0210 	bic.w	r2, r2, #16
 80011ba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 ff43 	bl	8002048 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0210 	orr.w	r2, r2, #16
 80011d0:	619a      	str	r2, [r3, #24]
 80011d2:	e000      	b.n	80011d6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80011d4:	bf00      	nop
    }
  }
}
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3314 	ldrb.w	r3, [r3, #788]	@ 0x314
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_HCD_Stop+0x16>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e00d      	b.n	800120e <HAL_HCD_Stop+0x32>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
  (void)USB_StopHost(hhcd->Instance);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fb61 	bl	80048c6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	78fa      	ldrb	r2, [r7, #3]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f9a9 	bl	800458c <USB_ReadChInterrupts>
 800123a:	4603      	mov	r3, r0
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b04      	cmp	r3, #4
 8001242:	d11a      	bne.n	800127a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	015a      	lsls	r2, r3, #5
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4413      	add	r3, r2
 800124c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001250:	461a      	mov	r2, r3
 8001252:	2304      	movs	r3, #4
 8001254:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001256:	78fa      	ldrb	r2, [r7, #3]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	440b      	add	r3, r1
 8001264:	3341      	adds	r3, #65	@ 0x41
 8001266:	2207      	movs	r2, #7
 8001268:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	78fa      	ldrb	r2, [r7, #3]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fa07 	bl	8004686 <USB_HC_Halt>
 8001278:	e09e      	b.n	80013b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	78fa      	ldrb	r2, [r7, #3]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f003 f982 	bl	800458c <USB_ReadChInterrupts>
 8001288:	4603      	mov	r3, r0
 800128a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001292:	d11b      	bne.n	80012cc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	015a      	lsls	r2, r3, #5
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4413      	add	r3, r2
 800129c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012a0:	461a      	mov	r2, r3
 80012a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80012a8:	78fa      	ldrb	r2, [r7, #3]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	440b      	add	r3, r1
 80012b6:	3341      	adds	r3, #65	@ 0x41
 80012b8:	2208      	movs	r2, #8
 80012ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	78fa      	ldrb	r2, [r7, #3]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 f9de 	bl	8004686 <USB_HC_Halt>
 80012ca:	e075      	b.n	80013b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	78fa      	ldrb	r2, [r7, #3]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 f959 	bl	800458c <USB_ReadChInterrupts>
 80012da:	4603      	mov	r3, r0
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d11a      	bne.n	800131a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012f0:	461a      	mov	r2, r3
 80012f2:	2308      	movs	r3, #8
 80012f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80012f6:	78fa      	ldrb	r2, [r7, #3]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	440b      	add	r3, r1
 8001304:	3341      	adds	r3, #65	@ 0x41
 8001306:	2206      	movs	r2, #6
 8001308:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	78fa      	ldrb	r2, [r7, #3]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f003 f9b7 	bl	8004686 <USB_HC_Halt>
 8001318:	e04e      	b.n	80013b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f003 f932 	bl	800458c <USB_ReadChInterrupts>
 8001328:	4603      	mov	r3, r0
 800132a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001332:	d11b      	bne.n	800136c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	015a      	lsls	r2, r3, #5
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4413      	add	r3, r2
 800133c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001340:	461a      	mov	r2, r3
 8001342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001346:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001348:	78fa      	ldrb	r2, [r7, #3]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	440b      	add	r3, r1
 8001356:	3341      	adds	r3, #65	@ 0x41
 8001358:	2209      	movs	r2, #9
 800135a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	78fa      	ldrb	r2, [r7, #3]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f003 f98e 	bl	8004686 <USB_HC_Halt>
 800136a:	e025      	b.n	80013b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f909 	bl	800458c <USB_ReadChInterrupts>
 800137a:	4603      	mov	r3, r0
 800137c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001380:	2b80      	cmp	r3, #128	@ 0x80
 8001382:	d119      	bne.n	80013b8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	015a      	lsls	r2, r3, #5
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4413      	add	r3, r2
 800138c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001390:	461a      	mov	r2, r3
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001396:	78fa      	ldrb	r2, [r7, #3]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	440b      	add	r3, r1
 80013a4:	3341      	adds	r3, #65	@ 0x41
 80013a6:	2207      	movs	r2, #7
 80013a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	78fa      	ldrb	r2, [r7, #3]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 f967 	bl	8004686 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	78fa      	ldrb	r2, [r7, #3]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 f8e3 	bl	800458c <USB_ReadChInterrupts>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013d0:	d111      	bne.n	80013f6 <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	78fa      	ldrb	r2, [r7, #3]
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f953 	bl	8004686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	015a      	lsls	r2, r3, #5
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013ec:	461a      	mov	r2, r3
 80013ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013f2:	6093      	str	r3, [r2, #8]
 80013f4:	e34b      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x878>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	78fa      	ldrb	r2, [r7, #3]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 f8c4 	bl	800458c <USB_ReadChInterrupts>
 8001404:	4603      	mov	r3, r0
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b01      	cmp	r3, #1
 800140c:	f040 80dc 	bne.w	80015c8 <HCD_HC_IN_IRQHandler+0x3b2>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 8001410:	78fa      	ldrb	r2, [r7, #3]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	440b      	add	r3, r1
 800141e:	3341      	adds	r3, #65	@ 0x41
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	440b      	add	r3, r1
 8001432:	333c      	adds	r3, #60	@ 0x3c
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4413      	add	r3, r2
 8001440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001444:	461a      	mov	r2, r3
 8001446:	2301      	movs	r3, #1
 8001448:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800144a:	78fa      	ldrb	r2, [r7, #3]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	440b      	add	r3, r1
 8001458:	331c      	adds	r3, #28
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00a      	beq.n	8001476 <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001460:	78fa      	ldrb	r2, [r7, #3]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	440b      	add	r3, r1
 800146e:	331c      	adds	r3, #28
 8001470:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001472:	2b02      	cmp	r3, #2
 8001474:	d110      	bne.n	8001498 <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f003 f901 	bl	8004686 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4413      	add	r3, r2
 800148c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001490:	461a      	mov	r2, r3
 8001492:	2310      	movs	r3, #16
 8001494:	6093      	str	r3, [r2, #8]
 8001496:	e03d      	b.n	8001514 <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	440b      	add	r3, r1
 80014a6:	331c      	adds	r3, #28
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d00a      	beq.n	80014c4 <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80014ae:	78fa      	ldrb	r2, [r7, #3]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	440b      	add	r3, r1
 80014bc:	331c      	adds	r3, #28
 80014be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d127      	bne.n	8001514 <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	78fa      	ldrb	r2, [r7, #3]
 80014d4:	0151      	lsls	r1, r2, #5
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	440a      	add	r2, r1
 80014da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80014de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	3340      	adds	r3, #64	@ 0x40
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80014f8:	78fa      	ldrb	r2, [r7, #3]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	440b      	add	r3, r1
 8001506:	3340      	adds	r3, #64	@ 0x40
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	4619      	mov	r1, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f003 fb34 	bl	8004b7c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	799b      	ldrb	r3, [r3, #6]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d13c      	bne.n	8001596 <HCD_HC_IN_IRQHandler+0x380>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800151c:	78fa      	ldrb	r2, [r7, #3]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	440b      	add	r3, r1
 800152a:	3330      	adds	r3, #48	@ 0x30
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4403      	add	r3, r0
 800153c:	331e      	adds	r3, #30
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	440b      	add	r3, r1
 8001542:	1e59      	subs	r1, r3, #1
 8001544:	78fa      	ldrb	r2, [r7, #3]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4403      	add	r3, r0
 8001552:	331e      	adds	r3, #30
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	fbb1 f3f3 	udiv	r3, r1, r3
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8295 	beq.w	8001a8e <HCD_HC_IN_IRQHandler+0x878>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	440b      	add	r3, r1
 8001574:	3304      	adds	r3, #4
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	f082 0201 	eor.w	r2, r2, #1
 800157e:	b2d0      	uxtb	r0, r2
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	440b      	add	r3, r1
 800158e:	3304      	adds	r3, #4
 8001590:	4602      	mov	r2, r0
 8001592:	701a      	strb	r2, [r3, #0]
 8001594:	e27b      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x878>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	440b      	add	r3, r1
 80015a6:	3304      	adds	r3, #4
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	f082 0201 	eor.w	r2, r2, #1
 80015b0:	b2d0      	uxtb	r0, r2
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	440b      	add	r3, r1
 80015c0:	3304      	adds	r3, #4
 80015c2:	4602      	mov	r2, r0
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e262      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x878>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 ffdb 	bl	800458c <USB_ReadChInterrupts>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d109      	bne.n	80015f4 <HCD_HC_IN_IRQHandler+0x3de>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015ec:	461a      	mov	r2, r3
 80015ee:	2320      	movs	r3, #32
 80015f0:	6093      	str	r3, [r2, #8]
 80015f2:	e24c      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x878>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 ffc5 	bl	800458c <USB_ReadChInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b02      	cmp	r3, #2
 800160a:	f040 81a0 	bne.w	800194e <HCD_HC_IN_IRQHandler+0x738>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4413      	add	r3, r2
 8001616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800161a:	461a      	mov	r2, r3
 800161c:	2302      	movs	r3, #2
 800161e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	440b      	add	r3, r1
 800162e:	3341      	adds	r3, #65	@ 0x41
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d114      	bne.n	8001660 <HCD_HC_IN_IRQHandler+0x44a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001636:	78fa      	ldrb	r2, [r7, #3]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	440b      	add	r3, r1
 8001644:	3341      	adds	r3, #65	@ 0x41
 8001646:	2202      	movs	r2, #2
 8001648:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	440b      	add	r3, r1
 8001658:	3340      	adds	r3, #64	@ 0x40
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e167      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	440b      	add	r3, r1
 800166e:	3341      	adds	r3, #65	@ 0x41
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b06      	cmp	r3, #6
 8001674:	d114      	bne.n	80016a0 <HCD_HC_IN_IRQHandler+0x48a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	440b      	add	r3, r1
 8001684:	3341      	adds	r3, #65	@ 0x41
 8001686:	2202      	movs	r2, #2
 8001688:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	3340      	adds	r3, #64	@ 0x40
 800169a:	2205      	movs	r2, #5
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e147      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80016a0:	78fa      	ldrb	r2, [r7, #3]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	440b      	add	r3, r1
 80016ae:	3341      	adds	r3, #65	@ 0x41
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	d00a      	beq.n	80016cc <HCD_HC_IN_IRQHandler+0x4b6>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	440b      	add	r3, r1
 80016c4:	3341      	adds	r3, #65	@ 0x41
 80016c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80016c8:	2b09      	cmp	r3, #9
 80016ca:	d176      	bne.n	80017ba <HCD_HC_IN_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	440b      	add	r3, r1
 80016da:	3341      	adds	r3, #65	@ 0x41
 80016dc:	2202      	movs	r2, #2
 80016de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	440b      	add	r3, r1
 80016ee:	333c      	adds	r3, #60	@ 0x3c
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1c59      	adds	r1, r3, #1
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4403      	add	r3, r0
 8001700:	333c      	adds	r3, #60	@ 0x3c
 8001702:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	440b      	add	r3, r1
 8001712:	333c      	adds	r3, #60	@ 0x3c
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d914      	bls.n	8001744 <HCD_HC_IN_IRQHandler+0x52e>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	440b      	add	r3, r1
 8001728:	333c      	adds	r3, #60	@ 0x3c
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	440b      	add	r3, r1
 800173c:	3340      	adds	r3, #64	@ 0x40
 800173e:	2204      	movs	r2, #4
 8001740:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001742:	e0f4      	b.n	800192e <HCD_HC_IN_IRQHandler+0x718>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	440b      	add	r3, r1
 8001752:	3340      	adds	r3, #64	@ 0x40
 8001754:	2202      	movs	r2, #2
 8001756:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	440b      	add	r3, r1
 8001766:	331c      	adds	r3, #28
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HCD_HC_IN_IRQHandler+0x570>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	440b      	add	r3, r1
 800177c:	331c      	adds	r3, #28
 800177e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001780:	2b02      	cmp	r3, #2
 8001782:	f040 80d4 	bne.w	800192e <HCD_HC_IN_IRQHandler+0x718>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4413      	add	r3, r2
 800178e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800179c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80017a4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80017b8:	e0b9      	b.n	800192e <HCD_HC_IN_IRQHandler+0x718>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	440b      	add	r3, r1
 80017c8:	3341      	adds	r3, #65	@ 0x41
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d10a      	bne.n	80017e6 <HCD_HC_IN_IRQHandler+0x5d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	440b      	add	r3, r1
 80017de:	3341      	adds	r3, #65	@ 0x41
 80017e0:	2202      	movs	r2, #2
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	e0a4      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	440b      	add	r3, r1
 80017f4:	3341      	adds	r3, #65	@ 0x41
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d10a      	bne.n	8001812 <HCD_HC_IN_IRQHandler+0x5fc>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	440b      	add	r3, r1
 800180a:	3341      	adds	r3, #65	@ 0x41
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e08e      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	440b      	add	r3, r1
 8001820:	3341      	adds	r3, #65	@ 0x41
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b04      	cmp	r3, #4
 8001826:	d143      	bne.n	80018b0 <HCD_HC_IN_IRQHandler+0x69a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	440b      	add	r3, r1
 8001836:	3341      	adds	r3, #65	@ 0x41
 8001838:	2202      	movs	r2, #2
 800183a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	440b      	add	r3, r1
 800184a:	3340      	adds	r3, #64	@ 0x40
 800184c:	2202      	movs	r2, #2
 800184e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	440b      	add	r3, r1
 800185e:	331c      	adds	r3, #28
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00a      	beq.n	800187c <HCD_HC_IN_IRQHandler+0x666>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	440b      	add	r3, r1
 8001874:	331c      	adds	r3, #28
 8001876:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001878:	2b02      	cmp	r3, #2
 800187a:	d159      	bne.n	8001930 <HCD_HC_IN_IRQHandler+0x71a>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	015a      	lsls	r2, r3, #5
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4413      	add	r3, r2
 8001884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001892:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800189a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	015a      	lsls	r2, r3, #5
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018a8:	461a      	mov	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e03f      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x71a>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	440b      	add	r3, r1
 80018be:	3341      	adds	r3, #65	@ 0x41
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d126      	bne.n	8001914 <HCD_HC_IN_IRQHandler+0x6fe>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	440b      	add	r3, r1
 80018d4:	3341      	adds	r3, #65	@ 0x41
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	440b      	add	r3, r1
 80018e8:	333c      	adds	r3, #60	@ 0x3c
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	1c59      	adds	r1, r3, #1
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	4403      	add	r3, r0
 80018fa:	333c      	adds	r3, #60	@ 0x3c
 80018fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	440b      	add	r3, r1
 800190c:	3340      	adds	r3, #64	@ 0x40
 800190e:	2204      	movs	r2, #4
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	e00d      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	440b      	add	r3, r1
 8001922:	3341      	adds	r3, #65	@ 0x41
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b02      	cmp	r3, #2
 8001928:	f000 80b0 	beq.w	8001a8c <HCD_HC_IN_IRQHandler+0x876>
 800192c:	e000      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x71a>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800192e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	440b      	add	r3, r1
 800193e:	3340      	adds	r3, #64	@ 0x40
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f003 f918 	bl	8004b7c <HAL_HCD_HC_NotifyURBChange_Callback>
 800194c:	e09f      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x878>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fe18 	bl	800458c <USB_ReadChInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001962:	2b40      	cmp	r3, #64	@ 0x40
 8001964:	d124      	bne.n	80019b0 <HCD_HC_IN_IRQHandler+0x79a>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4413      	add	r3, r2
 800196e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001972:	461a      	mov	r2, r3
 8001974:	2340      	movs	r3, #64	@ 0x40
 8001976:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	440b      	add	r3, r1
 8001986:	3341      	adds	r3, #65	@ 0x41
 8001988:	2205      	movs	r2, #5
 800198a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	440b      	add	r3, r1
 800199a:	333c      	adds	r3, #60	@ 0x3c
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fe6c 	bl	8004686 <USB_HC_Halt>
 80019ae:	e06e      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x878>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fde7 	bl	800458c <USB_ReadChInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b10      	cmp	r3, #16
 80019c6:	d162      	bne.n	8001a8e <HCD_HC_IN_IRQHandler+0x878>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	440b      	add	r3, r1
 80019d6:	331c      	adds	r3, #28
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d11b      	bne.n	8001a16 <HCD_HC_IN_IRQHandler+0x800>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	440b      	add	r3, r1
 80019ec:	333c      	adds	r3, #60	@ 0x3c
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	440b      	add	r3, r1
 8001a00:	3341      	adds	r3, #65	@ 0x41
 8001a02:	2204      	movs	r2, #4
 8001a04:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fe39 	bl	8004686 <USB_HC_Halt>
 8001a14:	e030      	b.n	8001a78 <HCD_HC_IN_IRQHandler+0x862>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	440b      	add	r3, r1
 8001a24:	331c      	adds	r3, #28
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00a      	beq.n	8001a42 <HCD_HC_IN_IRQHandler+0x82c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	440b      	add	r3, r1
 8001a3a:	331c      	adds	r3, #28
 8001a3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d11a      	bne.n	8001a78 <HCD_HC_IN_IRQHandler+0x862>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	440b      	add	r3, r1
 8001a50:	333c      	adds	r3, #60	@ 0x3c
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	440b      	add	r3, r1
 8001a64:	3341      	adds	r3, #65	@ 0x41
 8001a66:	2204      	movs	r2, #4
 8001a68:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fe07 	bl	8004686 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a84:	461a      	mov	r2, r3
 8001a86:	2310      	movs	r3, #16
 8001a88:	6093      	str	r3, [r2, #8]
 8001a8a:	e000      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x878>
        return;
 8001a8c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fd6a 	bl	800458c <USB_ReadChInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d11a      	bne.n	8001af8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3341      	adds	r3, #65	@ 0x41
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fdc8 	bl	8004686 <USB_HC_Halt>
 8001af6:	e2a4      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 fd43 	bl	800458c <USB_ReadChInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	d109      	bne.n	8001b24 <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2320      	movs	r3, #32
 8001b20:	6093      	str	r3, [r2, #8]
 8001b22:	e28e      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 fd2d 	bl	800458c <USB_ReadChInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b3c:	d111      	bne.n	8001b62 <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fd93 	bl	8004686 <USB_HC_Halt>
 8001b60:	e26f      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	78fa      	ldrb	r2, [r7, #3]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 fd0e 	bl	800458c <USB_ReadChInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d124      	bne.n	8001bc4 <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001b7a:	78fa      	ldrb	r2, [r7, #3]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	440b      	add	r3, r1
 8001b88:	333c      	adds	r3, #60	@ 0x3c
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	440b      	add	r3, r1
 8001bae:	3341      	adds	r3, #65	@ 0x41
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fd62 	bl	8004686 <USB_HC_Halt>
 8001bc2:	e23e      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 fcdd 	bl	800458c <USB_ReadChInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d11a      	bne.n	8001c12 <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	2308      	movs	r3, #8
 8001bec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3341      	adds	r3, #65	@ 0x41
 8001bfe:	2206      	movs	r2, #6
 8001c00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fd3b 	bl	8004686 <USB_HC_Halt>
 8001c10:	e217      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fcb6 	bl	800458c <USB_ReadChInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d124      	bne.n	8001c74 <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	440b      	add	r3, r1
 8001c38:	333c      	adds	r3, #60	@ 0x3c
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3341      	adds	r3, #65	@ 0x41
 8001c4e:	2204      	movs	r2, #4
 8001c50:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fd13 	bl	8004686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2310      	movs	r3, #16
 8001c70:	6093      	str	r3, [r2, #8]
 8001c72:	e1e6      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 fc85 	bl	800458c <USB_ReadChInterrupts>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c88:	2b80      	cmp	r3, #128	@ 0x80
 8001c8a:	d11a      	bne.n	8001cc2 <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	440b      	add	r3, r1
 8001c9a:	3341      	adds	r3, #65	@ 0x41
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 fcec 	bl	8004686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	015a      	lsls	r2, r3, #5
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	6093      	str	r3, [r2, #8]
 8001cc0:	e1bf      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 fc5e 	bl	800458c <USB_ReadChInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cda:	d11b      	bne.n	8001d14 <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	440b      	add	r3, r1
 8001cea:	3341      	adds	r3, #65	@ 0x41
 8001cec:	2209      	movs	r2, #9
 8001cee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fcc4 	bl	8004686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d10:	6093      	str	r3, [r2, #8]
 8001d12:	e196      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 fc35 	bl	800458c <USB_ReadChInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	f040 8187 	bne.w	800203c <HCD_HC_OUT_IRQHandler+0x5a8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3341      	adds	r3, #65	@ 0x41
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	f040 8097 	bne.w	8001e86 <HCD_HC_OUT_IRQHandler+0x3f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	440b      	add	r3, r1
 8001d66:	3341      	adds	r3, #65	@ 0x41
 8001d68:	2202      	movs	r2, #2
 8001d6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	440b      	add	r3, r1
 8001d7a:	3340      	adds	r3, #64	@ 0x40
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	440b      	add	r3, r1
 8001d8e:	331c      	adds	r3, #28
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d00b      	beq.n	8001dae <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	440b      	add	r3, r1
 8001da4:	331c      	adds	r3, #28
 8001da6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	f040 8138 	bne.w	800201e <HCD_HC_OUT_IRQHandler+0x58a>
      {
        if (hhcd->Init.dma_enable == 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	799b      	ldrb	r3, [r3, #6]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d117      	bne.n	8001de6 <HCD_HC_OUT_IRQHandler+0x352>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3305      	adds	r3, #5
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f082 0201 	eor.w	r2, r2, #1
 8001dd0:	b2d0      	uxtb	r0, r2
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	440b      	add	r3, r1
 8001de0:	3305      	adds	r3, #5
 8001de2:	4602      	mov	r2, r0
 8001de4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	799b      	ldrb	r3, [r3, #6]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	f040 8117 	bne.w	800201e <HCD_HC_OUT_IRQHandler+0x58a>
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	440b      	add	r3, r1
 8001dfe:	332c      	adds	r3, #44	@ 0x2c
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 810b 	beq.w	800201e <HCD_HC_OUT_IRQHandler+0x58a>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	440b      	add	r3, r1
 8001e16:	332c      	adds	r3, #44	@ 0x2c
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4403      	add	r3, r0
 8001e28:	331e      	adds	r3, #30
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	1e59      	subs	r1, r3, #1
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4403      	add	r3, r0
 8001e3e:	331e      	adds	r3, #30
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e46:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80e5 	beq.w	800201e <HCD_HC_OUT_IRQHandler+0x58a>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	440b      	add	r3, r1
 8001e64:	3305      	adds	r3, #5
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f082 0201 	eor.w	r2, r2, #1
 8001e6e:	b2d0      	uxtb	r0, r2
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3305      	adds	r3, #5
 8001e80:	4602      	mov	r2, r0
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e0cb      	b.n	800201e <HCD_HC_OUT_IRQHandler+0x58a>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	440b      	add	r3, r1
 8001e94:	3341      	adds	r3, #65	@ 0x41
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d10a      	bne.n	8001eb2 <HCD_HC_OUT_IRQHandler+0x41e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3341      	adds	r3, #65	@ 0x41
 8001eac:	2202      	movs	r2, #2
 8001eae:	701a      	strb	r2, [r3, #0]
 8001eb0:	e0b5      	b.n	800201e <HCD_HC_OUT_IRQHandler+0x58a>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3341      	adds	r3, #65	@ 0x41
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d114      	bne.n	8001ef2 <HCD_HC_OUT_IRQHandler+0x45e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3341      	adds	r3, #65	@ 0x41
 8001ed8:	2202      	movs	r2, #2
 8001eda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	440b      	add	r3, r1
 8001eea:	3340      	adds	r3, #64	@ 0x40
 8001eec:	2202      	movs	r2, #2
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e095      	b.n	800201e <HCD_HC_OUT_IRQHandler+0x58a>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	440b      	add	r3, r1
 8001f00:	3341      	adds	r3, #65	@ 0x41
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b06      	cmp	r3, #6
 8001f06:	d114      	bne.n	8001f32 <HCD_HC_OUT_IRQHandler+0x49e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	440b      	add	r3, r1
 8001f16:	3341      	adds	r3, #65	@ 0x41
 8001f18:	2202      	movs	r2, #2
 8001f1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	440b      	add	r3, r1
 8001f2a:	3340      	adds	r3, #64	@ 0x40
 8001f2c:	2205      	movs	r2, #5
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e075      	b.n	800201e <HCD_HC_OUT_IRQHandler+0x58a>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	440b      	add	r3, r1
 8001f40:	3341      	adds	r3, #65	@ 0x41
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	d00a      	beq.n	8001f5e <HCD_HC_OUT_IRQHandler+0x4ca>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	440b      	add	r3, r1
 8001f56:	3341      	adds	r3, #65	@ 0x41
 8001f58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001f5a:	2b09      	cmp	r3, #9
 8001f5c:	d170      	bne.n	8002040 <HCD_HC_OUT_IRQHandler+0x5ac>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3341      	adds	r3, #65	@ 0x41
 8001f6e:	2202      	movs	r2, #2
 8001f70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	440b      	add	r3, r1
 8001f80:	333c      	adds	r3, #60	@ 0x3c
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	1c59      	adds	r1, r3, #1
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4403      	add	r3, r0
 8001f92:	333c      	adds	r3, #60	@ 0x3c
 8001f94:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	440b      	add	r3, r1
 8001fa4:	333c      	adds	r3, #60	@ 0x3c
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d914      	bls.n	8001fd6 <HCD_HC_OUT_IRQHandler+0x542>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	440b      	add	r3, r1
 8001fba:	333c      	adds	r3, #60	@ 0x3c
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	440b      	add	r3, r1
 8001fce:	3340      	adds	r3, #64	@ 0x40
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001fd4:	e022      	b.n	800201c <HCD_HC_OUT_IRQHandler+0x588>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3340      	adds	r3, #64	@ 0x40
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002000:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002008:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800201c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	440b      	add	r3, r1
 800202c:	3340      	adds	r3, #64	@ 0x40
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f002 fda1 	bl	8004b7c <HAL_HCD_HC_NotifyURBChange_Callback>
 800203a:	e002      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800203c:	bf00      	nop
 800203e:	e000      	b.n	8002042 <HCD_HC_OUT_IRQHandler+0x5ae>
      return;
 8002040:	bf00      	nop
  }
}
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	0c5b      	lsrs	r3, r3, #17
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800207c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d004      	beq.n	800208e <HCD_RXQLVL_IRQHandler+0x46>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b05      	cmp	r3, #5
 8002088:	f000 80b8 	beq.w	80021fc <HCD_RXQLVL_IRQHandler+0x1b4>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800208c:	e0b9      	b.n	8002202 <HCD_RXQLVL_IRQHandler+0x1ba>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80b5 	beq.w	8002200 <HCD_RXQLVL_IRQHandler+0x1b8>
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	440b      	add	r3, r1
 80020a4:	3324      	adds	r3, #36	@ 0x24
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a9 	beq.w	8002200 <HCD_RXQLVL_IRQHandler+0x1b8>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	440b      	add	r3, r1
 80020bc:	3330      	adds	r3, #48	@ 0x30
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	18d1      	adds	r1, r2, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	4403      	add	r3, r0
 80020d2:	332c      	adds	r3, #44	@ 0x2c
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4299      	cmp	r1, r3
 80020d8:	f200 8085 	bhi.w	80021e6 <HCD_RXQLVL_IRQHandler+0x19e>
          (void)USB_ReadPacket(hhcd->Instance,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	440b      	add	r3, r1
 80020ee:	3324      	adds	r3, #36	@ 0x24
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	b292      	uxth	r2, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f002 f9dd 	bl	80044b6 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	440b      	add	r3, r1
 800210a:	3324      	adds	r3, #36	@ 0x24
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	18d1      	adds	r1, r2, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	4403      	add	r3, r0
 8002120:	3324      	adds	r3, #36	@ 0x24
 8002122:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	440b      	add	r3, r1
 8002132:	3330      	adds	r3, #48	@ 0x30
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	18d1      	adds	r1, r2, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	4403      	add	r3, r0
 8002148:	3330      	adds	r3, #48	@ 0x30
 800214a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	0cdb      	lsrs	r3, r3, #19
 800215c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002160:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	440b      	add	r3, r1
 8002170:	331e      	adds	r3, #30
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4293      	cmp	r3, r2
 800217a:	d141      	bne.n	8002200 <HCD_RXQLVL_IRQHandler+0x1b8>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03e      	beq.n	8002200 <HCD_RXQLVL_IRQHandler+0x1b8>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002198:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021a0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	440b      	add	r3, r1
 80021c4:	3304      	adds	r3, #4
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2d8      	uxtb	r0, r3
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	440b      	add	r3, r1
 80021de:	3304      	adds	r3, #4
 80021e0:	4602      	mov	r2, r0
 80021e2:	701a      	strb	r2, [r3, #0]
      break;
 80021e4:	e00c      	b.n	8002200 <HCD_RXQLVL_IRQHandler+0x1b8>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	440b      	add	r3, r1
 80021f4:	3340      	adds	r3, #64	@ 0x40
 80021f6:	2204      	movs	r2, #4
 80021f8:	701a      	strb	r2, [r3, #0]
      break;
 80021fa:	e001      	b.n	8002200 <HCD_RXQLVL_IRQHandler+0x1b8>
      break;
 80021fc:	bf00      	nop
 80021fe:	e000      	b.n	8002202 <HCD_RXQLVL_IRQHandler+0x1ba>
      break;
 8002200:	bf00      	nop
  }
}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	@ 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002236:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d10b      	bne.n	800225a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d102      	bne.n	8002252 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f002 fc79 	bl	8004b44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b08      	cmp	r3, #8
 8002262:	d132      	bne.n	80022ca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f043 0308 	orr.w	r3, r3, #8
 800226a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b04      	cmp	r3, #4
 8002274:	d126      	bne.n	80022c4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7a5b      	ldrb	r3, [r3, #9]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d113      	bne.n	80022a6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002284:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002288:	d106      	bne.n	8002298 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2102      	movs	r1, #2
 8002290:	4618      	mov	r0, r3
 8002292:	f002 f9aa 	bl	80045ea <USB_InitFSLSPClkSel>
 8002296:	e011      	b.n	80022bc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 f9a3 	bl	80045ea <USB_InitFSLSPClkSel>
 80022a4:	e00a      	b.n	80022bc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	79db      	ldrb	r3, [r3, #7]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022b4:	461a      	mov	r2, r3
 80022b6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80022ba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f002 fc6b 	bl	8004b98 <HAL_HCD_PortEnabled_Callback>
 80022c2:	e002      	b.n	80022ca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f002 fc75 	bl	8004bb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d103      	bne.n	80022dc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f043 0320 	orr.w	r3, r3, #32
 80022da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000

08002310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002314:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <HAL_PWREx_GetVoltageRange+0x18>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40007000 	.word	0x40007000

0800232c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800233a:	d130      	bne.n	800239e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800233c:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002348:	d038      	beq.n	80023bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002352:	4a1e      	ldr	r2, [pc, #120]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002354:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800235a:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2232      	movs	r2, #50	@ 0x32
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	4a1b      	ldr	r2, [pc, #108]	@ (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0c9b      	lsrs	r3, r3, #18
 800236c:	3301      	adds	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002370:	e002      	b.n	8002378 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3b01      	subs	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002384:	d102      	bne.n	800238c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f2      	bne.n	8002372 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800238c:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002398:	d110      	bne.n	80023bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e00f      	b.n	80023be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800239e:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023aa:	d007      	beq.n	80023bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ac:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023b4:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40007000 	.word	0x40007000
 80023d0:	20000008 	.word	0x20000008
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e3ca      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ea:	4b97      	ldr	r3, [pc, #604]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f4:	4b94      	ldr	r3, [pc, #592]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80e4 	beq.w	80025d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_RCC_OscConfig+0x4a>
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b0c      	cmp	r3, #12
 8002416:	f040 808b 	bne.w	8002530 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b01      	cmp	r3, #1
 800241e:	f040 8087 	bne.w	8002530 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002422:	4b89      	ldr	r3, [pc, #548]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x62>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e3a2      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1a      	ldr	r2, [r3, #32]
 800243e:	4b82      	ldr	r3, [pc, #520]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <HAL_RCC_OscConfig+0x7c>
 800244a:	4b7f      	ldr	r3, [pc, #508]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002452:	e005      	b.n	8002460 <HAL_RCC_OscConfig+0x88>
 8002454:	4b7c      	ldr	r3, [pc, #496]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002460:	4293      	cmp	r3, r2
 8002462:	d223      	bcs.n	80024ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fd55 	bl	8002f18 <RCC_SetFlashLatencyFromMSIRange>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e383      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002478:	4b73      	ldr	r3, [pc, #460]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a72      	ldr	r2, [pc, #456]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b70      	ldr	r3, [pc, #448]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	496d      	ldr	r1, [pc, #436]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002496:	4b6c      	ldr	r3, [pc, #432]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	4968      	ldr	r1, [pc, #416]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
 80024aa:	e025      	b.n	80024f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ac:	4b66      	ldr	r3, [pc, #408]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a65      	ldr	r2, [pc, #404]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80024b2:	f043 0308 	orr.w	r3, r3, #8
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b63      	ldr	r3, [pc, #396]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4960      	ldr	r1, [pc, #384]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	495b      	ldr	r1, [pc, #364]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fd15 	bl	8002f18 <RCC_SetFlashLatencyFromMSIRange>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e343      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024f8:	f000 fc4a 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b52      	ldr	r3, [pc, #328]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4950      	ldr	r1, [pc, #320]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	4a4e      	ldr	r2, [pc, #312]	@ (8002650 <HAL_RCC_OscConfig+0x278>)
 8002516:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002518:	4b4e      	ldr	r3, [pc, #312]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fa35 	bl	800098c <HAL_InitTick>
 8002522:	4603      	mov	r3, r0
 8002524:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d052      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	e327      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d032      	beq.n	800259e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002538:	4b43      	ldr	r3, [pc, #268]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a42      	ldr	r2, [pc, #264]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002544:	f7fe fa72 	bl	8000a2c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800254c:	f7fe fa6e 	bl	8000a2c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e310      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800255e:	4b3a      	ldr	r3, [pc, #232]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256a:	4b37      	ldr	r3, [pc, #220]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a36      	ldr	r2, [pc, #216]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b34      	ldr	r3, [pc, #208]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4931      	ldr	r1, [pc, #196]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002588:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	492c      	ldr	r1, [pc, #176]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
 800259c:	e01a      	b.n	80025d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800259e:	4b2a      	ldr	r3, [pc, #168]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a29      	ldr	r2, [pc, #164]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fa3f 	bl	8000a2c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b2:	f7fe fa3b 	bl	8000a2c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e2dd      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025c4:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x1da>
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d074      	beq.n	80026ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x21a>
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	d10e      	bne.n	800260a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d10b      	bne.n	800260a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d064      	beq.n	80026c8 <HAL_RCC_OscConfig+0x2f0>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d160      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e2ba      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x24a>
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e026      	b.n	8002670 <HAL_RCC_OscConfig+0x298>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800262a:	d115      	bne.n	8002658 <HAL_RCC_OscConfig+0x280>
 800262c:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a05      	ldr	r2, [pc, #20]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 8002632:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a02      	ldr	r2, [pc, #8]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800263e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x298>
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	08004cd0 	.word	0x08004cd0
 8002650:	20000008 	.word	0x20000008
 8002654:	2000000c 	.word	0x2000000c
 8002658:	4ba0      	ldr	r3, [pc, #640]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a9f      	ldr	r2, [pc, #636]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 800265e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b9d      	ldr	r3, [pc, #628]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a9c      	ldr	r2, [pc, #624]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 800266a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800266e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe f9d8 	bl	8000a2c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe f9d4 	bl	8000a2c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	@ 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e276      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002692:	4b92      	ldr	r3, [pc, #584]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x2a8>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe f9c4 	bl	8000a2c <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe f9c0 	bl	8000a2c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e262      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ba:	4b88      	ldr	r3, [pc, #544]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x2d0>
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d060      	beq.n	8002798 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_OscConfig+0x310>
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	d119      	bne.n	8002716 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d116      	bne.n	8002716 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e8:	4b7c      	ldr	r3, [pc, #496]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_OscConfig+0x328>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e23f      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b76      	ldr	r3, [pc, #472]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	4973      	ldr	r1, [pc, #460]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002714:	e040      	b.n	8002798 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d023      	beq.n	8002766 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800271e:	4b6f      	ldr	r3, [pc, #444]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6e      	ldr	r2, [pc, #440]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe f97f 	bl	8000a2c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002732:	f7fe f97b 	bl	8000a2c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e21d      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002744:	4b65      	ldr	r3, [pc, #404]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b62      	ldr	r3, [pc, #392]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	495f      	ldr	r1, [pc, #380]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
 8002764:	e018      	b.n	8002798 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002766:	4b5d      	ldr	r3, [pc, #372]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a5c      	ldr	r2, [pc, #368]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 800276c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe f95b 	bl	8000a2c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277a:	f7fe f957 	bl	8000a2c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1f9      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800278c:	4b53      	ldr	r3, [pc, #332]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d03c      	beq.n	800281e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ac:	4b4b      	ldr	r3, [pc, #300]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80027ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027b2:	4a4a      	ldr	r2, [pc, #296]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe f936 	bl	8000a2c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe f932 	bl	8000a2c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1d4      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d6:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ef      	beq.n	80027c4 <HAL_RCC_OscConfig+0x3ec>
 80027e4:	e01b      	b.n	800281e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e6:	4b3d      	ldr	r3, [pc, #244]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80027e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ec:	4a3b      	ldr	r2, [pc, #236]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe f919 	bl	8000a2c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fe:	f7fe f915 	bl	8000a2c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1b7      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002810:	4b32      	ldr	r3, [pc, #200]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ef      	bne.n	80027fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80a6 	beq.w	8002978 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002830:	4b2a      	ldr	r3, [pc, #168]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	4b27      	ldr	r3, [pc, #156]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002840:	4a26      	ldr	r2, [pc, #152]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002846:	6593      	str	r3, [r2, #88]	@ 0x58
 8002848:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002854:	2301      	movs	r3, #1
 8002856:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002858:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <HAL_RCC_OscConfig+0x508>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d118      	bne.n	8002896 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002864:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <HAL_RCC_OscConfig+0x508>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <HAL_RCC_OscConfig+0x508>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002870:	f7fe f8dc 	bl	8000a2c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002878:	f7fe f8d8 	bl	8000a2c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e17a      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <HAL_RCC_OscConfig+0x508>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d108      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4d8>
 800289e:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a4:	4a0d      	ldr	r2, [pc, #52]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ae:	e029      	b.n	8002904 <HAL_RCC_OscConfig+0x52c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b05      	cmp	r3, #5
 80028b6:	d115      	bne.n	80028e4 <HAL_RCC_OscConfig+0x50c>
 80028b8:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028be:	4a07      	ldr	r2, [pc, #28]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028c8:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ce:	4a03      	ldr	r2, [pc, #12]	@ (80028dc <HAL_RCC_OscConfig+0x504>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028d8:	e014      	b.n	8002904 <HAL_RCC_OscConfig+0x52c>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
 80028e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ea:	4a9b      	ldr	r2, [pc, #620]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028f4:	4b98      	ldr	r3, [pc, #608]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fa:	4a97      	ldr	r2, [pc, #604]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d016      	beq.n	800293a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe f88e 	bl	8000a2c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7fe f88a 	bl	8000a2c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e12a      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292a:	4b8b      	ldr	r3, [pc, #556]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ed      	beq.n	8002914 <HAL_RCC_OscConfig+0x53c>
 8002938:	e015      	b.n	8002966 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7fe f877 	bl	8000a2c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7fe f873 	bl	8000a2c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e113      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002958:	4b7f      	ldr	r3, [pc, #508]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1ed      	bne.n	8002942 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002966:	7ffb      	ldrb	r3, [r7, #31]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296c:	4b7a      	ldr	r3, [pc, #488]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002970:	4a79      	ldr	r2, [pc, #484]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002976:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80fe 	beq.w	8002b7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	2b02      	cmp	r3, #2
 8002988:	f040 80d0 	bne.w	8002b2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800298c:	4b72      	ldr	r3, [pc, #456]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0203 	and.w	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	429a      	cmp	r2, r3
 800299e:	d130      	bne.n	8002a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	3b01      	subs	r3, #1
 80029ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d127      	bne.n	8002a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d11f      	bne.n	8002a02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029cc:	2a07      	cmp	r2, #7
 80029ce:	bf14      	ite	ne
 80029d0:	2201      	movne	r2, #1
 80029d2:	2200      	moveq	r2, #0
 80029d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d113      	bne.n	8002a02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	3b01      	subs	r3, #1
 80029e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	3b01      	subs	r3, #1
 80029fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d06e      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d069      	beq.n	8002adc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a08:	4b53      	ldr	r3, [pc, #332]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a14:	4b50      	ldr	r3, [pc, #320]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0ad      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a24:	4b4c      	ldr	r3, [pc, #304]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a4b      	ldr	r2, [pc, #300]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a30:	f7fd fffc 	bl	8000a2c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fd fff8 	bl	8000a2c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e09a      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a4a:	4b43      	ldr	r3, [pc, #268]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a56:	4b40      	ldr	r3, [pc, #256]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	4b40      	ldr	r3, [pc, #256]	@ (8002b5c <HAL_RCC_OscConfig+0x784>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a66:	3a01      	subs	r2, #1
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	4311      	orrs	r1, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a70:	0212      	lsls	r2, r2, #8
 8002a72:	4311      	orrs	r1, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a78:	0852      	lsrs	r2, r2, #1
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	0552      	lsls	r2, r2, #21
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a84:	0852      	lsrs	r2, r2, #1
 8002a86:	3a01      	subs	r2, #1
 8002a88:	0652      	lsls	r2, r2, #25
 8002a8a:	4311      	orrs	r1, r2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a90:	0912      	lsrs	r2, r2, #4
 8002a92:	0452      	lsls	r2, r2, #17
 8002a94:	430a      	orrs	r2, r1
 8002a96:	4930      	ldr	r1, [pc, #192]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a2a      	ldr	r2, [pc, #168]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab4:	f7fd ffba 	bl	8000a2c <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fd ffb6 	bl	8000a2c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e058      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ada:	e050      	b.n	8002b7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e04f      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d148      	bne.n	8002b7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002aec:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a19      	ldr	r2, [pc, #100]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002af6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af8:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a16      	ldr	r2, [pc, #88]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b04:	f7fd ff92 	bl	8000a2c <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fd ff8e 	bl	8000a2c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e030      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x734>
 8002b2a:	e028      	b.n	8002b7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d023      	beq.n	8002b7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a08      	ldr	r2, [pc, #32]	@ (8002b58 <HAL_RCC_OscConfig+0x780>)
 8002b38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fd ff75 	bl	8000a2c <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b44:	e00c      	b.n	8002b60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fd ff71 	bl	8000a2c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d905      	bls.n	8002b60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e013      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b60:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_RCC_OscConfig+0x7b0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ec      	bne.n	8002b46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_RCC_OscConfig+0x7b0>)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	4905      	ldr	r1, [pc, #20]	@ (8002b88 <HAL_RCC_OscConfig+0x7b0>)
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_RCC_OscConfig+0x7b4>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
 8002b78:	e001      	b.n	8002b7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	feeefffc 	.word	0xfeeefffc

08002b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0e7      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b75      	ldr	r3, [pc, #468]	@ (8002d7c <HAL_RCC_ClockConfig+0x1ec>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d910      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b72      	ldr	r3, [pc, #456]	@ (8002d7c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 0207 	bic.w	r2, r3, #7
 8002bba:	4970      	ldr	r1, [pc, #448]	@ (8002d7c <HAL_RCC_ClockConfig+0x1ec>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d7c <HAL_RCC_ClockConfig+0x1ec>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0cf      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b66      	ldr	r3, [pc, #408]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d908      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b63      	ldr	r3, [pc, #396]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4960      	ldr	r1, [pc, #384]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d04c      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c16:	4b5a      	ldr	r3, [pc, #360]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d121      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0a6      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2e:	4b54      	ldr	r3, [pc, #336]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d115      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e09a      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c46:	4b4e      	ldr	r3, [pc, #312]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e08e      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c56:	4b4a      	ldr	r3, [pc, #296]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e086      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c66:	4b46      	ldr	r3, [pc, #280]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 0203 	bic.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4943      	ldr	r1, [pc, #268]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c78:	f7fd fed8 	bl	8000a2c <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f7fd fed4 	bl	8000a2c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e06e      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	4b3a      	ldr	r3, [pc, #232]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 020c 	and.w	r2, r3, #12
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d1eb      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d208      	bcs.n	8002cd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	492b      	ldr	r1, [pc, #172]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd6:	4b29      	ldr	r3, [pc, #164]	@ (8002d7c <HAL_RCC_ClockConfig+0x1ec>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d210      	bcs.n	8002d06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce4:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <HAL_RCC_ClockConfig+0x1ec>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 0207 	bic.w	r2, r3, #7
 8002cec:	4923      	ldr	r1, [pc, #140]	@ (8002d7c <HAL_RCC_ClockConfig+0x1ec>)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf4:	4b21      	ldr	r3, [pc, #132]	@ (8002d7c <HAL_RCC_ClockConfig+0x1ec>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e036      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d12:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	4918      	ldr	r1, [pc, #96]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d009      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d30:	4b13      	ldr	r3, [pc, #76]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4910      	ldr	r1, [pc, #64]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d44:	f000 f824 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	490b      	ldr	r1, [pc, #44]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f4>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d60:	4a09      	ldr	r2, [pc, #36]	@ (8002d88 <HAL_RCC_ClockConfig+0x1f8>)
 8002d62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_RCC_ClockConfig+0x1fc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fe0f 	bl	800098c <HAL_InitTick>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d72:	7afb      	ldrb	r3, [r7, #11]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08004cd0 	.word	0x08004cd0
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	@ 0x24
 8002d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da8:	4b3b      	ldr	r3, [pc, #236]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	d121      	bne.n	8002e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d11e      	bne.n	8002e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dc4:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dd0:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	e005      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002de0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dec:	4a2b      	ldr	r2, [pc, #172]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10d      	bne.n	8002e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d102      	bne.n	8002e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e08:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e004      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e14:	4b23      	ldr	r3, [pc, #140]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d134      	bne.n	8002e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d003      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0xac>
 8002e34:	e005      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e38:	617b      	str	r3, [r7, #20]
      break;
 8002e3a:	e005      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e3e:	617b      	str	r3, [r7, #20]
      break;
 8002e40:	e002      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	617b      	str	r3, [r7, #20]
      break;
 8002e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e48:	4b13      	ldr	r3, [pc, #76]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	3301      	adds	r3, #1
 8002e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e56:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	fb03 f202 	mul.w	r2, r3, r2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	0e5b      	lsrs	r3, r3, #25
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e88:	69bb      	ldr	r3, [r7, #24]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	@ 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	08004ce8 	.word	0x08004ce8
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	007a1200 	.word	0x007a1200

08002ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b03      	ldr	r3, [pc, #12]	@ (8002ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ec4:	f7ff fff0 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4904      	ldr	r1, [pc, #16]	@ (8002ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	08004ce0 	.word	0x08004ce0

08002eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef0:	f7ff ffda 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0adb      	lsrs	r3, r3, #11
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4904      	ldr	r1, [pc, #16]	@ (8002f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08004ce0 	.word	0x08004ce0

08002f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f24:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f30:	f7ff f9ee 	bl	8002310 <HAL_PWREx_GetVoltageRange>
 8002f34:	6178      	str	r0, [r7, #20]
 8002f36:	e014      	b.n	8002f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f38:	4b25      	ldr	r3, [pc, #148]	@ (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3c:	4a24      	ldr	r2, [pc, #144]	@ (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f44:	4b22      	ldr	r3, [pc, #136]	@ (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f50:	f7ff f9de 	bl	8002310 <HAL_PWREx_GetVoltageRange>
 8002f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f68:	d10b      	bne.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b80      	cmp	r3, #128	@ 0x80
 8002f6e:	d919      	bls.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f74:	d902      	bls.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f76:	2302      	movs	r3, #2
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e013      	b.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e010      	b.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b80      	cmp	r3, #128	@ 0x80
 8002f86:	d902      	bls.n	8002f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f88:	2303      	movs	r3, #3
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	e00a      	b.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b80      	cmp	r3, #128	@ 0x80
 8002f92:	d102      	bne.n	8002f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f94:	2302      	movs	r3, #2
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	e004      	b.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b70      	cmp	r3, #112	@ 0x70
 8002f9e:	d101      	bne.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 0207 	bic.w	r2, r3, #7
 8002fac:	4909      	ldr	r1, [pc, #36]	@ (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fb4:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d001      	beq.n	8002fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40022000 	.word	0x40022000

08002fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d041      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ff8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ffc:	d02a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ffe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003002:	d824      	bhi.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003004:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003008:	d008      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800300a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800300e:	d81e      	bhi.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003018:	d010      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800301a:	e018      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800301c:	4b86      	ldr	r3, [pc, #536]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a85      	ldr	r2, [pc, #532]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003026:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003028:	e015      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3304      	adds	r3, #4
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f000 facb 	bl	80035cc <RCCEx_PLLSAI1_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800303a:	e00c      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3320      	adds	r3, #32
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fbb6 	bl	80037b4 <RCCEx_PLLSAI2_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800304c:	e003      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	74fb      	strb	r3, [r7, #19]
      break;
 8003052:	e000      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003056:	7cfb      	ldrb	r3, [r7, #19]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10b      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800305c:	4b76      	ldr	r3, [pc, #472]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003062:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800306a:	4973      	ldr	r1, [pc, #460]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003072:	e001      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d041      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003088:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800308c:	d02a      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800308e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003092:	d824      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003094:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003098:	d008      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800309a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800309e:	d81e      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030a8:	d010      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030aa:	e018      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030ac:	4b62      	ldr	r3, [pc, #392]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a61      	ldr	r2, [pc, #388]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b8:	e015      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fa83 	bl	80035cc <RCCEx_PLLSAI1_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ca:	e00c      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3320      	adds	r3, #32
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fb6e 	bl	80037b4 <RCCEx_PLLSAI2_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030dc:	e003      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	74fb      	strb	r3, [r7, #19]
      break;
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e6:	7cfb      	ldrb	r3, [r7, #19]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030ec:	4b52      	ldr	r3, [pc, #328]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030fa:	494f      	ldr	r1, [pc, #316]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003102:	e001      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a0 	beq.w	8003256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800311a:	4b47      	ldr	r3, [pc, #284]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800312a:	2300      	movs	r3, #0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003130:	4b41      	ldr	r3, [pc, #260]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003134:	4a40      	ldr	r2, [pc, #256]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	@ 0x58
 800313c:	4b3e      	ldr	r3, [pc, #248]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003148:	2301      	movs	r3, #1
 800314a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800314c:	4b3b      	ldr	r3, [pc, #236]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3a      	ldr	r2, [pc, #232]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003158:	f7fd fc68 	bl	8000a2c <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315e:	e009      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003160:	f7fd fc64 	bl	8000a2c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	74fb      	strb	r3, [r7, #19]
        break;
 8003172:	e005      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003174:	4b31      	ldr	r3, [pc, #196]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d15c      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003186:	4b2c      	ldr	r3, [pc, #176]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01f      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d019      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031a4:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031b0:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b6:	4a20      	ldr	r2, [pc, #128]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031d0:	4a19      	ldr	r2, [pc, #100]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fd fc23 	bl	8000a2c <HAL_GetTick>
 80031e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e8:	e00b      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fd fc1f 	bl	8000a2c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d902      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003202:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ec      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003216:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003226:	4904      	ldr	r1, [pc, #16]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800322e:	e009      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
 8003234:	e006      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003244:	7c7b      	ldrb	r3, [r7, #17]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b9e      	ldr	r3, [pc, #632]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	4a9d      	ldr	r2, [pc, #628]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003262:	4b98      	ldr	r3, [pc, #608]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f023 0203 	bic.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	4994      	ldr	r1, [pc, #592]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003284:	4b8f      	ldr	r3, [pc, #572]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	f023 020c 	bic.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003292:	498c      	ldr	r1, [pc, #560]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a6:	4b87      	ldr	r3, [pc, #540]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	4983      	ldr	r1, [pc, #524]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c8:	4b7e      	ldr	r3, [pc, #504]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	497b      	ldr	r1, [pc, #492]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ea:	4b76      	ldr	r3, [pc, #472]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f8:	4972      	ldr	r1, [pc, #456]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800330c:	4b6d      	ldr	r3, [pc, #436]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	496a      	ldr	r1, [pc, #424]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800332e:	4b65      	ldr	r3, [pc, #404]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003334:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	4961      	ldr	r1, [pc, #388]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003350:	4b5c      	ldr	r3, [pc, #368]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003356:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335e:	4959      	ldr	r1, [pc, #356]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003372:	4b54      	ldr	r3, [pc, #336]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003378:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003380:	4950      	ldr	r1, [pc, #320]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003394:	4b4b      	ldr	r3, [pc, #300]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	4948      	ldr	r1, [pc, #288]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b6:	4b43      	ldr	r3, [pc, #268]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	493f      	ldr	r1, [pc, #252]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d028      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d8:	4b3a      	ldr	r3, [pc, #232]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e6:	4937      	ldr	r1, [pc, #220]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033f6:	d106      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f8:	4b32      	ldr	r3, [pc, #200]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a31      	ldr	r2, [pc, #196]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003402:	60d3      	str	r3, [r2, #12]
 8003404:	e011      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800340a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800340e:	d10c      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f8d8 	bl	80035cc <RCCEx_PLLSAI1_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d028      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003436:	4b23      	ldr	r3, [pc, #140]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003444:	491f      	ldr	r1, [pc, #124]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003454:	d106      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003456:	4b1b      	ldr	r3, [pc, #108]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	4a1a      	ldr	r2, [pc, #104]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003460:	60d3      	str	r3, [r2, #12]
 8003462:	e011      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003468:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800346c:	d10c      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f000 f8a9 	bl	80035cc <RCCEx_PLLSAI1_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02b      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003494:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	4908      	ldr	r1, [pc, #32]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034b2:	d109      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b4:	4b03      	ldr	r3, [pc, #12]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a02      	ldr	r2, [pc, #8]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034be:	60d3      	str	r3, [r2, #12]
 80034c0:	e014      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2101      	movs	r1, #1
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 f877 	bl	80035cc <RCCEx_PLLSAI1_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02f      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f8:	4b2b      	ldr	r3, [pc, #172]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003506:	4928      	ldr	r1, [pc, #160]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003516:	d10d      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	2102      	movs	r1, #2
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f854 	bl	80035cc <RCCEx_PLLSAI1_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d014      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	74bb      	strb	r3, [r7, #18]
 8003532:	e011      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3320      	adds	r3, #32
 8003542:	2102      	movs	r1, #2
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f935 	bl	80037b4 <RCCEx_PLLSAI2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003564:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003572:	490d      	ldr	r1, [pc, #52]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003586:	4b08      	ldr	r3, [pc, #32]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003596:	4904      	ldr	r1, [pc, #16]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800359e:	7cbb      	ldrb	r3, [r7, #18]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000

080035ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a04      	ldr	r2, [pc, #16]	@ (80035c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035b6:	f043 0304 	orr.w	r3, r3, #4
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000

080035cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035da:	4b75      	ldr	r3, [pc, #468]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d018      	beq.n	8003618 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035e6:	4b72      	ldr	r3, [pc, #456]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0203 	and.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d10d      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
       ||
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035fe:	4b6c      	ldr	r3, [pc, #432]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
       ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d047      	beq.n	80036a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	e044      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d018      	beq.n	8003652 <RCCEx_PLLSAI1_Config+0x86>
 8003620:	2b03      	cmp	r3, #3
 8003622:	d825      	bhi.n	8003670 <RCCEx_PLLSAI1_Config+0xa4>
 8003624:	2b01      	cmp	r3, #1
 8003626:	d002      	beq.n	800362e <RCCEx_PLLSAI1_Config+0x62>
 8003628:	2b02      	cmp	r3, #2
 800362a:	d009      	beq.n	8003640 <RCCEx_PLLSAI1_Config+0x74>
 800362c:	e020      	b.n	8003670 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800362e:	4b60      	ldr	r3, [pc, #384]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11d      	bne.n	8003676 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363e:	e01a      	b.n	8003676 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003640:	4b5b      	ldr	r3, [pc, #364]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d116      	bne.n	800367a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003650:	e013      	b.n	800367a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003652:	4b57      	ldr	r3, [pc, #348]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800365e:	4b54      	ldr	r3, [pc, #336]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800366e:	e006      	b.n	800367e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e004      	b.n	8003680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003676:	bf00      	nop
 8003678:	e002      	b.n	8003680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	3b01      	subs	r3, #1
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	430b      	orrs	r3, r1
 800369c:	4944      	ldr	r1, [pc, #272]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d17d      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036a8:	4b41      	ldr	r3, [pc, #260]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a40      	ldr	r2, [pc, #256]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b4:	f7fd f9ba 	bl	8000a2c <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ba:	e009      	b.n	80036d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036bc:	f7fd f9b6 	bl	8000a2c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	73fb      	strb	r3, [r7, #15]
        break;
 80036ce:	e005      	b.n	80036dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d0:	4b37      	ldr	r3, [pc, #220]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ef      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d160      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d111      	bne.n	800370c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e8:	4b31      	ldr	r3, [pc, #196]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80036f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	0211      	lsls	r1, r2, #8
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68d2      	ldr	r2, [r2, #12]
 80036fe:	0912      	lsrs	r2, r2, #4
 8003700:	0452      	lsls	r2, r2, #17
 8003702:	430a      	orrs	r2, r1
 8003704:	492a      	ldr	r1, [pc, #168]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	4313      	orrs	r3, r2
 8003708:	610b      	str	r3, [r1, #16]
 800370a:	e027      	b.n	800375c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d112      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003712:	4b27      	ldr	r3, [pc, #156]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800371a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	0211      	lsls	r1, r2, #8
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6912      	ldr	r2, [r2, #16]
 8003728:	0852      	lsrs	r2, r2, #1
 800372a:	3a01      	subs	r2, #1
 800372c:	0552      	lsls	r2, r2, #21
 800372e:	430a      	orrs	r2, r1
 8003730:	491f      	ldr	r1, [pc, #124]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	610b      	str	r3, [r1, #16]
 8003736:	e011      	b.n	800375c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003738:	4b1d      	ldr	r3, [pc, #116]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003740:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6892      	ldr	r2, [r2, #8]
 8003748:	0211      	lsls	r1, r2, #8
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6952      	ldr	r2, [r2, #20]
 800374e:	0852      	lsrs	r2, r2, #1
 8003750:	3a01      	subs	r2, #1
 8003752:	0652      	lsls	r2, r2, #25
 8003754:	430a      	orrs	r2, r1
 8003756:	4916      	ldr	r1, [pc, #88]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800375c:	4b14      	ldr	r3, [pc, #80]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a13      	ldr	r2, [pc, #76]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd f960 	bl	8000a2c <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800376e:	e009      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003770:	f7fd f95c 	bl	8000a2c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d902      	bls.n	8003784 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	73fb      	strb	r3, [r7, #15]
          break;
 8003782:	e005      	b.n	8003790 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003784:	4b0a      	ldr	r3, [pc, #40]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003796:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	4904      	ldr	r1, [pc, #16]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000

080037b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037c2:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ce:	4b67      	ldr	r3, [pc, #412]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0203 	and.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10d      	bne.n	80037fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
       ||
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037e6:	4b61      	ldr	r3, [pc, #388]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
       ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d047      	beq.n	800388a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	e044      	b.n	800388a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d018      	beq.n	800383a <RCCEx_PLLSAI2_Config+0x86>
 8003808:	2b03      	cmp	r3, #3
 800380a:	d825      	bhi.n	8003858 <RCCEx_PLLSAI2_Config+0xa4>
 800380c:	2b01      	cmp	r3, #1
 800380e:	d002      	beq.n	8003816 <RCCEx_PLLSAI2_Config+0x62>
 8003810:	2b02      	cmp	r3, #2
 8003812:	d009      	beq.n	8003828 <RCCEx_PLLSAI2_Config+0x74>
 8003814:	e020      	b.n	8003858 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003816:	4b55      	ldr	r3, [pc, #340]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11d      	bne.n	800385e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003826:	e01a      	b.n	800385e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003828:	4b50      	ldr	r3, [pc, #320]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d116      	bne.n	8003862 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003838:	e013      	b.n	8003862 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800383a:	4b4c      	ldr	r3, [pc, #304]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003846:	4b49      	ldr	r3, [pc, #292]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003856:	e006      	b.n	8003866 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      break;
 800385c:	e004      	b.n	8003868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003866:	bf00      	nop
    }

    if(status == HAL_OK)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800386e:	4b3f      	ldr	r3, [pc, #252]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	430b      	orrs	r3, r1
 8003884:	4939      	ldr	r1, [pc, #228]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d167      	bne.n	8003960 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003890:	4b36      	ldr	r3, [pc, #216]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a35      	ldr	r2, [pc, #212]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800389a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389c:	f7fd f8c6 	bl	8000a2c <HAL_GetTick>
 80038a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a2:	e009      	b.n	80038b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038a4:	f7fd f8c2 	bl	8000a2c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d902      	bls.n	80038b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	73fb      	strb	r3, [r7, #15]
        break;
 80038b6:	e005      	b.n	80038c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038b8:	4b2c      	ldr	r3, [pc, #176]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ef      	bne.n	80038a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d14a      	bne.n	8003960 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d0:	4b26      	ldr	r3, [pc, #152]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68d2      	ldr	r2, [r2, #12]
 80038e6:	0912      	lsrs	r2, r2, #4
 80038e8:	0452      	lsls	r2, r2, #17
 80038ea:	430a      	orrs	r2, r1
 80038ec:	491f      	ldr	r1, [pc, #124]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	614b      	str	r3, [r1, #20]
 80038f2:	e011      	b.n	8003918 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f4:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6892      	ldr	r2, [r2, #8]
 8003904:	0211      	lsls	r1, r2, #8
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6912      	ldr	r2, [r2, #16]
 800390a:	0852      	lsrs	r2, r2, #1
 800390c:	3a01      	subs	r2, #1
 800390e:	0652      	lsls	r2, r2, #25
 8003910:	430a      	orrs	r2, r1
 8003912:	4916      	ldr	r1, [pc, #88]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	4313      	orrs	r3, r2
 8003916:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003918:	4b14      	ldr	r3, [pc, #80]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a13      	ldr	r2, [pc, #76]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003922:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd f882 	bl	8000a2c <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800392a:	e009      	b.n	8003940 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800392c:	f7fd f87e 	bl	8000a2c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d902      	bls.n	8003940 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	73fb      	strb	r3, [r7, #15]
          break;
 800393e:	e005      	b.n	800394c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003940:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	4904      	ldr	r1, [pc, #16]	@ (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	4313      	orrs	r3, r2
 800395e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e040      	b.n	8003a04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fc fefe 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	@ 0x24
 800399c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fae0 	bl	8003f7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f825 	bl	8003a0c <UART_SetConfig>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e01b      	b.n	8003a04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fb5f 	bl	80040c0 <UART_CheckIdleState>
 8003a02:	4603      	mov	r3, r0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b08a      	sub	sp, #40	@ 0x28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4ba4      	ldr	r3, [pc, #656]	@ (8003ccc <UART_SetConfig+0x2c0>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a99      	ldr	r2, [pc, #612]	@ (8003cd0 <UART_SetConfig+0x2c4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a74:	4313      	orrs	r3, r2
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a90      	ldr	r2, [pc, #576]	@ (8003cd4 <UART_SetConfig+0x2c8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d126      	bne.n	8003ae4 <UART_SetConfig+0xd8>
 8003a96:	4b90      	ldr	r3, [pc, #576]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d81b      	bhi.n	8003adc <UART_SetConfig+0xd0>
 8003aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aac <UART_SetConfig+0xa0>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003abd 	.word	0x08003abd
 8003ab0:	08003acd 	.word	0x08003acd
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003ad5 	.word	0x08003ad5
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac2:	e116      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aca:	e112      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003acc:	2304      	movs	r3, #4
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad2:	e10e      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ada:	e10a      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003adc:	2310      	movs	r3, #16
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae2:	e106      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a7c      	ldr	r2, [pc, #496]	@ (8003cdc <UART_SetConfig+0x2d0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d138      	bne.n	8003b60 <UART_SetConfig+0x154>
 8003aee:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	d82d      	bhi.n	8003b58 <UART_SetConfig+0x14c>
 8003afc:	a201      	add	r2, pc, #4	@ (adr r2, 8003b04 <UART_SetConfig+0xf8>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b59 	.word	0x08003b59
 8003b10:	08003b59 	.word	0x08003b59
 8003b14:	08003b49 	.word	0x08003b49
 8003b18:	08003b59 	.word	0x08003b59
 8003b1c:	08003b59 	.word	0x08003b59
 8003b20:	08003b59 	.word	0x08003b59
 8003b24:	08003b41 	.word	0x08003b41
 8003b28:	08003b59 	.word	0x08003b59
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	08003b51 	.word	0x08003b51
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3e:	e0d8      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b40:	2302      	movs	r3, #2
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b46:	e0d4      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e0d0      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b50:	2308      	movs	r3, #8
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b56:	e0cc      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5e:	e0c8      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5e      	ldr	r2, [pc, #376]	@ (8003ce0 <UART_SetConfig+0x2d4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d125      	bne.n	8003bb6 <UART_SetConfig+0x1aa>
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	d016      	beq.n	8003ba6 <UART_SetConfig+0x19a>
 8003b78:	2b30      	cmp	r3, #48	@ 0x30
 8003b7a:	d818      	bhi.n	8003bae <UART_SetConfig+0x1a2>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d00a      	beq.n	8003b96 <UART_SetConfig+0x18a>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d814      	bhi.n	8003bae <UART_SetConfig+0x1a2>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <UART_SetConfig+0x182>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d008      	beq.n	8003b9e <UART_SetConfig+0x192>
 8003b8c:	e00f      	b.n	8003bae <UART_SetConfig+0x1a2>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b94:	e0ad      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b96:	2302      	movs	r3, #2
 8003b98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9c:	e0a9      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b9e:	2304      	movs	r3, #4
 8003ba0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba4:	e0a5      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bac:	e0a1      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bae:	2310      	movs	r3, #16
 8003bb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb4:	e09d      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce4 <UART_SetConfig+0x2d8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d125      	bne.n	8003c0c <UART_SetConfig+0x200>
 8003bc0:	4b45      	ldr	r3, [pc, #276]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bcc:	d016      	beq.n	8003bfc <UART_SetConfig+0x1f0>
 8003bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bd0:	d818      	bhi.n	8003c04 <UART_SetConfig+0x1f8>
 8003bd2:	2b80      	cmp	r3, #128	@ 0x80
 8003bd4:	d00a      	beq.n	8003bec <UART_SetConfig+0x1e0>
 8003bd6:	2b80      	cmp	r3, #128	@ 0x80
 8003bd8:	d814      	bhi.n	8003c04 <UART_SetConfig+0x1f8>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <UART_SetConfig+0x1d8>
 8003bde:	2b40      	cmp	r3, #64	@ 0x40
 8003be0:	d008      	beq.n	8003bf4 <UART_SetConfig+0x1e8>
 8003be2:	e00f      	b.n	8003c04 <UART_SetConfig+0x1f8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bea:	e082      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bec:	2302      	movs	r3, #2
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf2:	e07e      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	e07a      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c02:	e076      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c04:	2310      	movs	r3, #16
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0a:	e072      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a35      	ldr	r2, [pc, #212]	@ (8003ce8 <UART_SetConfig+0x2dc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d12a      	bne.n	8003c6c <UART_SetConfig+0x260>
 8003c16:	4b30      	ldr	r3, [pc, #192]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c24:	d01a      	beq.n	8003c5c <UART_SetConfig+0x250>
 8003c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c2a:	d81b      	bhi.n	8003c64 <UART_SetConfig+0x258>
 8003c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c30:	d00c      	beq.n	8003c4c <UART_SetConfig+0x240>
 8003c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c36:	d815      	bhi.n	8003c64 <UART_SetConfig+0x258>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <UART_SetConfig+0x238>
 8003c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c40:	d008      	beq.n	8003c54 <UART_SetConfig+0x248>
 8003c42:	e00f      	b.n	8003c64 <UART_SetConfig+0x258>
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4a:	e052      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c52:	e04e      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c54:	2304      	movs	r3, #4
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5a:	e04a      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c62:	e046      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c64:	2310      	movs	r3, #16
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6a:	e042      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <UART_SetConfig+0x2c4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d13a      	bne.n	8003cec <UART_SetConfig+0x2e0>
 8003c76:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c84:	d01a      	beq.n	8003cbc <UART_SetConfig+0x2b0>
 8003c86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c8a:	d81b      	bhi.n	8003cc4 <UART_SetConfig+0x2b8>
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c90:	d00c      	beq.n	8003cac <UART_SetConfig+0x2a0>
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c96:	d815      	bhi.n	8003cc4 <UART_SetConfig+0x2b8>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <UART_SetConfig+0x298>
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca0:	d008      	beq.n	8003cb4 <UART_SetConfig+0x2a8>
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x2b8>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e022      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e01e      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e01a      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e016      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e012      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ccc:	efff69f3 	.word	0xefff69f3
 8003cd0:	40008000 	.word	0x40008000
 8003cd4:	40013800 	.word	0x40013800
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40004400 	.word	0x40004400
 8003ce0:	40004800 	.word	0x40004800
 8003ce4:	40004c00 	.word	0x40004c00
 8003ce8:	40005000 	.word	0x40005000
 8003cec:	2310      	movs	r3, #16
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a9f      	ldr	r2, [pc, #636]	@ (8003f74 <UART_SetConfig+0x568>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d17a      	bne.n	8003df2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d824      	bhi.n	8003d4e <UART_SetConfig+0x342>
 8003d04:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <UART_SetConfig+0x300>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d4f 	.word	0x08003d4f
 8003d14:	08003d39 	.word	0x08003d39
 8003d18:	08003d4f 	.word	0x08003d4f
 8003d1c:	08003d3f 	.word	0x08003d3f
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d4f 	.word	0x08003d4f
 8003d28:	08003d4f 	.word	0x08003d4f
 8003d2c:	08003d47 	.word	0x08003d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d30:	f7ff f8c6 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8003d34:	61f8      	str	r0, [r7, #28]
        break;
 8003d36:	e010      	b.n	8003d5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b8f      	ldr	r3, [pc, #572]	@ (8003f78 <UART_SetConfig+0x56c>)
 8003d3a:	61fb      	str	r3, [r7, #28]
        break;
 8003d3c:	e00d      	b.n	8003d5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7ff f827 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8003d42:	61f8      	str	r0, [r7, #28]
        break;
 8003d44:	e009      	b.n	8003d5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d4a:	61fb      	str	r3, [r7, #28]
        break;
 8003d4c:	e005      	b.n	8003d5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80fb 	beq.w	8003f58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4413      	add	r3, r2
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d305      	bcc.n	8003d7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d903      	bls.n	8003d86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d84:	e0e8      	b.n	8003f58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	461c      	mov	r4, r3
 8003d8c:	4615      	mov	r5, r2
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	022b      	lsls	r3, r5, #8
 8003d98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d9c:	0222      	lsls	r2, r4, #8
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	6849      	ldr	r1, [r1, #4]
 8003da2:	0849      	lsrs	r1, r1, #1
 8003da4:	2000      	movs	r0, #0
 8003da6:	4688      	mov	r8, r1
 8003da8:	4681      	mov	r9, r0
 8003daa:	eb12 0a08 	adds.w	sl, r2, r8
 8003dae:	eb43 0b09 	adc.w	fp, r3, r9
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dc0:	4650      	mov	r0, sl
 8003dc2:	4659      	mov	r1, fp
 8003dc4:	f7fc fa00 	bl	80001c8 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd6:	d308      	bcc.n	8003dea <UART_SetConfig+0x3de>
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dde:	d204      	bcs.n	8003dea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	e0b6      	b.n	8003f58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003df0:	e0b2      	b.n	8003f58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dfa:	d15e      	bne.n	8003eba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d828      	bhi.n	8003e56 <UART_SetConfig+0x44a>
 8003e04:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0x400>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e57 	.word	0x08003e57
 8003e1c:	08003e47 	.word	0x08003e47
 8003e20:	08003e57 	.word	0x08003e57
 8003e24:	08003e57 	.word	0x08003e57
 8003e28:	08003e57 	.word	0x08003e57
 8003e2c:	08003e4f 	.word	0x08003e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7ff f846 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8003e34:	61f8      	str	r0, [r7, #28]
        break;
 8003e36:	e014      	b.n	8003e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7ff f858 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 8003e3c:	61f8      	str	r0, [r7, #28]
        break;
 8003e3e:	e010      	b.n	8003e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e40:	4b4d      	ldr	r3, [pc, #308]	@ (8003f78 <UART_SetConfig+0x56c>)
 8003e42:	61fb      	str	r3, [r7, #28]
        break;
 8003e44:	e00d      	b.n	8003e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e46:	f7fe ffa3 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8003e4a:	61f8      	str	r0, [r7, #28]
        break;
 8003e4c:	e009      	b.n	8003e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e005      	b.n	8003e62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d077      	beq.n	8003f58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005a      	lsls	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	441a      	add	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b0f      	cmp	r3, #15
 8003e82:	d916      	bls.n	8003eb2 <UART_SetConfig+0x4a6>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e8a:	d212      	bcs.n	8003eb2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f023 030f 	bic.w	r3, r3, #15
 8003e94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	8afb      	ldrh	r3, [r7, #22]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	8afa      	ldrh	r2, [r7, #22]
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	e052      	b.n	8003f58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003eb8:	e04e      	b.n	8003f58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d827      	bhi.n	8003f12 <UART_SetConfig+0x506>
 8003ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <UART_SetConfig+0x4bc>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003f13 	.word	0x08003f13
 8003ed8:	08003f03 	.word	0x08003f03
 8003edc:	08003f13 	.word	0x08003f13
 8003ee0:	08003f13 	.word	0x08003f13
 8003ee4:	08003f13 	.word	0x08003f13
 8003ee8:	08003f0b 	.word	0x08003f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7fe ffe8 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	61f8      	str	r0, [r7, #28]
        break;
 8003ef2:	e014      	b.n	8003f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7fe fffa 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 8003ef8:	61f8      	str	r0, [r7, #28]
        break;
 8003efa:	e010      	b.n	8003f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003efc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f78 <UART_SetConfig+0x56c>)
 8003efe:	61fb      	str	r3, [r7, #28]
        break;
 8003f00:	e00d      	b.n	8003f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f02:	f7fe ff45 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8003f06:	61f8      	str	r0, [r7, #28]
        break;
 8003f08:	e009      	b.n	8003f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f0e:	61fb      	str	r3, [r7, #28]
        break;
 8003f10:	e005      	b.n	8003f1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d019      	beq.n	8003f58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	085a      	lsrs	r2, r3, #1
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	441a      	add	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	d909      	bls.n	8003f52 <UART_SetConfig+0x546>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f44:	d205      	bcs.n	8003f52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60da      	str	r2, [r3, #12]
 8003f50:	e002      	b.n	8003f58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3728      	adds	r7, #40	@ 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f72:	bf00      	nop
 8003f74:	40008000 	.word	0x40008000
 8003f78:	00f42400 	.word	0x00f42400

08003f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01a      	beq.n	8004092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407a:	d10a      	bne.n	8004092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b098      	sub	sp, #96	@ 0x60
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d0:	f7fc fcac 	bl	8000a2c <HAL_GetTick>
 80040d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d12e      	bne.n	8004142 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ec:	2200      	movs	r2, #0
 80040ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f88c 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d021      	beq.n	8004142 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800410c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004112:	653b      	str	r3, [r7, #80]	@ 0x50
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800411c:	647b      	str	r3, [r7, #68]	@ 0x44
 800411e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800412a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e6      	bne.n	80040fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e062      	b.n	8004208 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b04      	cmp	r3, #4
 800414e:	d149      	bne.n	80041e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f856 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d03c      	beq.n	80041e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	623b      	str	r3, [r7, #32]
   return(result);
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004188:	633b      	str	r3, [r7, #48]	@ 0x30
 800418a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800418e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e6      	bne.n	800416a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041bc:	61fa      	str	r2, [r7, #28]
 80041be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	617b      	str	r3, [r7, #20]
   return(result);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e5      	bne.n	800419c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e011      	b.n	8004208 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3758      	adds	r7, #88	@ 0x58
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004220:	e04f      	b.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d04b      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fc fbff 	bl	8000a2c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <UART_WaitOnFlagUntilTimeout+0x30>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e04e      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d037      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b80      	cmp	r3, #128	@ 0x80
 8004256:	d034      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b40      	cmp	r3, #64	@ 0x40
 800425c:	d031      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d110      	bne.n	800428e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2208      	movs	r2, #8
 8004272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f838 	bl	80042ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2208      	movs	r2, #8
 800427e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e029      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800429c:	d111      	bne.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f81e 	bl	80042ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e00f      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d0a0      	beq.n	8004222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b095      	sub	sp, #84	@ 0x54
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004310:	643b      	str	r3, [r7, #64]	@ 0x40
 8004312:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004316:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800431e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e6      	bne.n	80042f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	61fb      	str	r3, [r7, #28]
   return(result);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004344:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800434a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e5      	bne.n	8004324 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435c:	2b01      	cmp	r3, #1
 800435e:	d118      	bne.n	8004392 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	60bb      	str	r3, [r7, #8]
   return(result);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f023 0310 	bic.w	r3, r3, #16
 8004374:	647b      	str	r3, [r7, #68]	@ 0x44
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800437e:	61bb      	str	r3, [r7, #24]
 8004380:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6979      	ldr	r1, [r7, #20]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	613b      	str	r3, [r7, #16]
   return(result);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e6      	bne.n	8004360 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043a6:	bf00      	nop
 80043a8:	3754      	adds	r7, #84	@ 0x54
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f043 0201 	orr.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f023 0201 	bic.w	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004410:	d901      	bls.n	8004416 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e01b      	b.n	800444e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	daf2      	bge.n	8004404 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	f043 0220 	orr.w	r2, r3, #32
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800443a:	d901      	bls.n	8004440 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e006      	b.n	800444e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d0f0      	beq.n	800442e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004472:	d901      	bls.n	8004478 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e018      	b.n	80044aa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	daf2      	bge.n	8004466 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2210      	movs	r2, #16
 8004488:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004496:	d901      	bls.n	800449c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e006      	b.n	80044aa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d0f0      	beq.n	800448a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b08b      	sub	sp, #44	@ 0x2c
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044dc:	2300      	movs	r3, #0
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	e014      	b.n	800450c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	601a      	str	r2, [r3, #0]
    pDest++;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	3301      	adds	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	3301      	adds	r3, #1
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	3301      	adds	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004502:	3301      	adds	r3, #1
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	3301      	adds	r3, #1
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	429a      	cmp	r2, r3
 8004512:	d3e6      	bcc.n	80044e2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004514:	8bfb      	ldrh	r3, [r7, #30]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01e      	beq.n	8004558 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004524:	461a      	mov	r2, r3
 8004526:	f107 0310 	add.w	r3, r7, #16
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	fa22 f303 	lsr.w	r3, r2, r3
 800453a:	b2da      	uxtb	r2, r3
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	701a      	strb	r2, [r3, #0]
      i++;
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	3301      	adds	r3, #1
 8004544:	623b      	str	r3, [r7, #32]
      pDest++;
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	3301      	adds	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800454c:	8bfb      	ldrh	r3, [r7, #30]
 800454e:	3b01      	subs	r3, #1
 8004550:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004552:	8bfb      	ldrh	r3, [r7, #30]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ea      	bne.n	800452e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800455a:	4618      	mov	r0, r3
 800455c:	372c      	adds	r7, #44	@ 0x2c
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4013      	ands	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045c0:	68bb      	ldr	r3, [r7, #8]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0301 	and.w	r3, r3, #1
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004608:	f023 0303 	bic.w	r3, r3, #3
 800460c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004632:	461a      	mov	r2, r3
 8004634:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004638:	6053      	str	r3, [r2, #4]
 800463a:	e00c      	b.n	8004656 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d107      	bne.n	8004652 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004648:	461a      	mov	r2, r3
 800464a:	f241 7370 	movw	r3, #6000	@ 0x1770
 800464e:	6053      	str	r3, [r2, #4]
 8004650:	e001      	b.n	8004656 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	b29b      	uxth	r3, r3
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004686:	b480      	push	{r7}
 8004688:	b089      	sub	sp, #36	@ 0x24
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0c9b      	lsrs	r3, r3, #18
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	0fdb      	lsrs	r3, r3, #31
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	0fdb      	lsrs	r3, r3, #31
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d10d      	bne.n	8004708 <USB_HC_Halt+0x82>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <USB_HC_Halt+0x82>
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d002      	beq.n	8004704 <USB_HC_Halt+0x7e>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d101      	bne.n	8004708 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e0d8      	b.n	80048ba <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <USB_HC_Halt+0x8e>
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d173      	bne.n	80047fc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	440a      	add	r2, r1
 800472a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800472e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004732:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d14a      	bne.n	80047d6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d133      	bne.n	80047b4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	440a      	add	r2, r1
 8004762:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004766:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800476a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	440a      	add	r2, r1
 8004782:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004786:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800478a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	3301      	adds	r3, #1
 8004790:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004798:	d82e      	bhi.n	80047f8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047b0:	d0ec      	beq.n	800478c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047b2:	e081      	b.n	80048b8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047d2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047d4:	e070      	b.n	80048b8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047f6:	e05f      	b.n	80048b8 <USB_HC_Halt+0x232>
            break;
 80047f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047fa:	e05d      	b.n	80048b8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	4413      	add	r3, r2
 8004804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	440a      	add	r2, r1
 8004812:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004816:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800481a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d133      	bne.n	8004894 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4413      	add	r3, r2
 8004834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	0151      	lsls	r1, r2, #5
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	440a      	add	r2, r1
 8004842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004846:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800484a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	440a      	add	r2, r1
 8004862:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800486a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3301      	adds	r3, #1
 8004870:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004878:	d81d      	bhi.n	80048b6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800488c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004890:	d0ec      	beq.n	800486c <USB_HC_Halt+0x1e6>
 8004892:	e011      	b.n	80048b8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	e000      	b.n	80048b8 <USB_HC_Halt+0x232>
          break;
 80048b6:	bf00      	nop
    }
  }

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	@ 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b088      	sub	sp, #32
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff fd7a 	bl	80043d4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048e0:	2110      	movs	r1, #16
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff fd87 	bl	80043f6 <USB_FlushTxFifo>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff fdb1 	bl	800445a <USB_FlushRxFifo>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004902:	2300      	movs	r3, #0
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	e01f      	b.n	8004948 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
 8004910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800491e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004926:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800492e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	4413      	add	r3, r2
 8004938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800493c:	461a      	mov	r2, r3
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	3301      	adds	r3, #1
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d9dc      	bls.n	8004908 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	e034      	b.n	80049be <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4413      	add	r3, r2
 800495c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800496a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004972:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800497a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004988:	461a      	mov	r2, r3
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3301      	adds	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800499a:	d80c      	bhi.n	80049b6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049b2:	d0ec      	beq.n	800498e <USB_StopHost+0xc8>
 80049b4:	e000      	b.n	80049b8 <USB_StopHost+0xf2>
        break;
 80049b6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	3301      	adds	r3, #1
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b0f      	cmp	r3, #15
 80049c2:	d9c7      	bls.n	8004954 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 33ff 	mov.w	r3, #4294967295
 80049d0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295
 80049d8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fce9 	bl	80043b2 <USB_EnableGlobalInt>

  return ret;
 80049e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f804 	bl	8004a0e <USBH_HandleSof>
}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b0b      	cmp	r3, #11
 8004a1e:	d10a      	bne.n	8004a36 <USBH_HandleSof+0x28>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
  }
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004a4e:	bf00      	nop
}
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8004a6a:	bf00      	nop
}
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f883 	bl	8004bd0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	791b      	ldrb	r3, [r3, #4]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f80b 	bl	8004aec <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	795b      	ldrb	r3, [r3, #5]
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f805 	bl	8004aec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	2b0f      	cmp	r3, #15
 8004afc:	d80d      	bhi.n	8004b1a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	33e0      	adds	r3, #224	@ 0xe0
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	33e0      	adds	r3, #224	@ 0xe0
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ff57 	bl	80049ea <USBH_LL_IncTimer>
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff ff8f 	bl	8004a76 <USBH_LL_Connect>
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff ff98 	bl	8004aa4 <USBH_LL_Disconnect>
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ff49 	bl	8004a3e <USBH_LL_PortEnabled>
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff ff49 	bl	8004a5a <USBH_LL_PortDisabled>
}
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fc faf8 	bl	80011dc <HAL_HCD_Stop>
 8004bec:	4603      	mov	r3, r0
 8004bee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f808 	bl	8004c08 <USBH_Get_USB_Status>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d817      	bhi.n	8004c4c <USBH_Get_USB_Status+0x44>
 8004c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c24 <USBH_Get_USB_Status+0x1c>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c35 	.word	0x08004c35
 8004c28:	08004c3b 	.word	0x08004c3b
 8004c2c:	08004c41 	.word	0x08004c41
 8004c30:	08004c47 	.word	0x08004c47
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	73fb      	strb	r3, [r7, #15]
    break;
 8004c38:	e00b      	b.n	8004c52 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8004c3e:	e008      	b.n	8004c52 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
    break;
 8004c44:	e005      	b.n	8004c52 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004c46:	2302      	movs	r3, #2
 8004c48:	73fb      	strb	r3, [r7, #15]
    break;
 8004c4a:	e002      	b.n	8004c52 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8004c50:	bf00      	nop
  }
  return usb_status;
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <memset>:
 8004c60:	4402      	add	r2, r0
 8004c62:	4603      	mov	r3, r0
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d100      	bne.n	8004c6a <memset+0xa>
 8004c68:	4770      	bx	lr
 8004c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6e:	e7f9      	b.n	8004c64 <memset+0x4>

08004c70 <__libc_init_array>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	4d0d      	ldr	r5, [pc, #52]	@ (8004ca8 <__libc_init_array+0x38>)
 8004c74:	4c0d      	ldr	r4, [pc, #52]	@ (8004cac <__libc_init_array+0x3c>)
 8004c76:	1b64      	subs	r4, r4, r5
 8004c78:	10a4      	asrs	r4, r4, #2
 8004c7a:	2600      	movs	r6, #0
 8004c7c:	42a6      	cmp	r6, r4
 8004c7e:	d109      	bne.n	8004c94 <__libc_init_array+0x24>
 8004c80:	4d0b      	ldr	r5, [pc, #44]	@ (8004cb0 <__libc_init_array+0x40>)
 8004c82:	4c0c      	ldr	r4, [pc, #48]	@ (8004cb4 <__libc_init_array+0x44>)
 8004c84:	f000 f818 	bl	8004cb8 <_init>
 8004c88:	1b64      	subs	r4, r4, r5
 8004c8a:	10a4      	asrs	r4, r4, #2
 8004c8c:	2600      	movs	r6, #0
 8004c8e:	42a6      	cmp	r6, r4
 8004c90:	d105      	bne.n	8004c9e <__libc_init_array+0x2e>
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c98:	4798      	blx	r3
 8004c9a:	3601      	adds	r6, #1
 8004c9c:	e7ee      	b.n	8004c7c <__libc_init_array+0xc>
 8004c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca2:	4798      	blx	r3
 8004ca4:	3601      	adds	r6, #1
 8004ca6:	e7f2      	b.n	8004c8e <__libc_init_array+0x1e>
 8004ca8:	08004d20 	.word	0x08004d20
 8004cac:	08004d20 	.word	0x08004d20
 8004cb0:	08004d20 	.word	0x08004d20
 8004cb4:	08004d24 	.word	0x08004d24

08004cb8 <_init>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr

08004cc4 <_fini>:
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	bf00      	nop
 8004cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cca:	bc08      	pop	{r3}
 8004ccc:	469e      	mov	lr, r3
 8004cce:	4770      	bx	lr
